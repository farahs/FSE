--DROP VIEW "ACCOUNTS_CA"; --v
--DROP VIEW "CAMEMBERS"; --v
--DROP VIEW "CASECURITIES_CA"; -- v
--DROP VIEW "INSTRUCTIONS"; -- v
--DROP VIEW "INTEREST_PAYMENT_DATA"; --v
--DROP VIEW "MEMBERS_CA"; --v
--DROP VIEW "OTC_BOND"; --v
--DROP VIEW "POSITION_MOVEMENTS"; --v
--DROP VIEW "SECURITIES_CA"; --v
--DROP VIEW "WARRANTS_CA"; --v
--DROP VIEW "TECH_INSTRUCTIONS"; --v
--DROP VIEW "SNAPSHOT_BALANCES"; --v
--DROP VIEW "INSTRUMENT_CODES";
--------------------------------------------------------
--  DDL for View ACCOUNTS_CA -- OK
--------------------------------------------------------

    CREATE OR REPLACE VIEW "ACCOUNTS_CA" ("CODE_ACCT_STA", "CODE_ATA", "DSC_ACCT", "EXT_REF", "ID_ACCT", "LST_UPD_TS", "TYP_ACCT", "TYP_FLG_ACCT", "MEM_ID_MEM_XCSD", "MEM_PB_ID_MEM_CAPCO", "CORR_ACCT", "CODE_BR", "MEM_IVS_ID_MEM_CAPCO", "INV_ID_ISD_KSEI", "ID_ACCT_XCSD") AS 
	SELECT DISTINCT
            CASE
            WHEN AC_COMPOSITE.IDENT_ACTIVATIONTYPE = 1 AND (RESTR.RESTRICTWHOLEACCOUNT IS NULL OR (RESTR.RESTRICTWHOLEACCOUNT =1 AND RESTR.VALIDTO IS NOT NULL)) THEN 1
            WHEN AC_COMPOSITE.IDENT_ACTIVATIONTYPE = 2 THEN 3
            WHEN AC_COMPOSITE.IDENT_ACTIVATIONTYPE = 4 OR (RESTR.RESTRICTWHOLEACCOUNT = 1 AND RESTR.VALIDTO IS NULL) THEN 2
            END AS CODE_ACCT_STA,
            CASE
            WHEN REG.CODE IS NOT NULL THEN 1003
            WHEN AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE = 'KSEPB000100103' THEN 1003
            WHEN AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE IN (
                'BCA02000000139',
                'BMAN2000000118',
                'BNGA3000000164',
                'BRI03000000174',
                'KSEPB000000170',
                'PRMT2000000147'
            ) THEN 1008
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 1 THEN 1010
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 2 THEN 1013
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 3 THEN 1037
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 4 THEN 1012
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 5 THEN 1008
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 6 THEN 1019
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 7 THEN 1006
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 8 THEN 1015
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 9 THEN 1001
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND SUBSTR(AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE,1,5) = 'KSEI1' THEN 1076
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 2
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 IS NULL THEN 1037
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 3 THEN 1007
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 4
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 2 THEN 1098
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 4
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 5 THEN 1067
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 4
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 3 THEN 1098
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 4
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 4 THEN 1099
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 4
            AND HOLDER.IDENT_INDUSTRYCLASSIFICATION1 = 6 THEN 1100
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'ID' THEN 1078
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'KW' THEN 1090
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'KR' THEN 1093
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'CA' THEN 1095
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'GB' THEN 1096
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'US' THEN 1097
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'BN' THEN 1101
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'SE' THEN 1102
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'NO' THEN 1249
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 5
            AND HOLDER.TAXDOMICILE = 'SG' THEN 1084
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 6 THEN 1006
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 7
            AND HOLDER.TAXDOMICILE = 'BN' THEN 1121
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 7
            AND HOLDER.TAXDOMICILE = 'MY' THEN 1122
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 7
            AND HOLDER.TAXDOMICILE = 'AE' THEN 1125
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 7
            AND HOLDER.TAXDOMICILE = 'SG' THEN 1152
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 8 THEN 1077
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 9
            AND HOLDER.TAXDOMICILE != 'ID' THEN 1004
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 10 THEN 1242
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'AT' THEN 1107
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'AU' THEN 1108
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'CA' THEN 1113
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'DK' THEN 1116
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'FR' THEN 1119
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'DE' THEN 1120
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'HK' THEN 1126
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'IT' THEN 1130
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'JP' THEN 1131
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'LU' THEN 1135
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'MY' THEN 1136
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'NL' THEN 1141
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'NO' THEN 1143
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'CN' THEN 1148
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'SG' THEN 1153
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'KR' THEN 1154
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'SE' THEN 1160
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'CH' THEN 1161
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'TW' THEN 1163
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'TH' THEN 1164
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'AE' THEN 1167
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'GB' THEN 1170
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'US' THEN 1172
            WHEN (HOLDEREXT.IDENT_TAXCLASSIFICATION = 11 OR HOLDEREXT.IDENT_TAXCLASSIFICATION = 12)
            AND HOLDER.TAXDOMICILE = 'IN' THEN 1129
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 13 THEN 1011
            WHEN HOLDEREXT.IDENT_TAXCLASSIFICATION = 14 THEN 1017
            ELSE HOLDEREXT.IDENT_TAXCLASSIFICATION END
            AS CODE_ATA,
            CASE WHEN HOLDER.IDENT_INVESTORTYPE = 1 THEN REGEXP_REPLACE(TRIM(HOLDER.DISPLAYNAME), ' {2,}', ' ')  
			ELSE REGEXP_REPLACE(TRIM(AC_COMPOSITE.ACCOUNTNAME), ' {2,}', ' ') END DSC_ACCT, 
            SUBSTR(AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE,6,4) AS EXT_REF,
            AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE AS ID_ACCT,
            CASE WHEN RESTR.REVISION_EFFECTIVE_FROM IS NOT NULL
            THEN GREATEST(NVL(AC_COMPOSITE.LASTUPDATETIME,AC_COMPOSITE.REVISION_EFFECTIVE_FROM), RESTR.REVISION_EFFECTIVE_FROM)
            WHEN HOLDER.LASTUPDATETIME IS NOT NULL
            THEN GREATEST(NVL(AC_COMPOSITE.LASTUPDATETIME,AC_COMPOSITE.REVISION_EFFECTIVE_FROM), HOLDER.LASTUPDATETIME)
            ELSE NVL(AC_COMPOSITE.LASTUPDATETIME,AC_COMPOSITE.REVISION_EFFECTIVE_FROM) END AS LST_UPD_TS,
            CASE
            WHEN AC_SECURITY.IDENT_ACCOUNTTYPE = 92 OR AC_SECURITY.IDENT_ACCOUNTTYPE = 84 THEN '001'
            ELSE SUBSTR(AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE, 10,3)
            END AS TYP_ACCT,
            CASE
            WHEN AC_SECURITY.IDENT_ACCOUNTTYPE = 84 THEN 2
            WHEN AC_CASH.IDENT_ACCOUNTTYPE = 1 THEN 2
            ELSE 1
            END AS TYP_FLG_ACCT,
            AC_COMPOSITE.IDENT_OPERATOR AS MEM_ID_MEM_XCSD,
            PAYMENTBANK.CODE AS MEM_PB_ID_MEM_CAPCO,
            CAST(NULL AS VARCHAR(40)) AS CORR_ACCT,
            CASE WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 13 THEN 1
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 17 THEN 2
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 9 THEN 3
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 5 THEN 4
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 4 THEN 1001
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 3 THEN 1002
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 11 THEN 1012
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 7 THEN 1006
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 8 THEN 1007
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 12 THEN 1008
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 1 THEN 1009
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 6 THEN 1010
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 10 THEN 1011
            WHEN RESTR.IDENT_RESTRICTIONSUBTYPE = 16 THEN 1013 END AS CODE_BR,
            CAST(NULL AS VARCHAR(40)) AS MEM_IVS_ID_MEM_CAPCO,
            SUBSTR(AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE,0,9) AS INV_ID_ISD_KSEI,
            AC_COMPOSITE.IDENT_ACCOUNTCOMPOSITE AS ID_ACCT_XCSD
            FROM ACCOUNTCOMPOSITE AC_COMPOSITE
            LEFT JOIN SECURITIESACCOUNT AC_SECURITY ON AC_SECURITY.IDENT_ACCOUNTCOMPOSITE = AC_COMPOSITE.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT AC_CASH ON AC_CASH.IDENT_ACCOUNTCOMPOSITE = AC_COMPOSITE.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN PAYMENTBANK ON PAYMENTBANK.IDENT_PAYMENTBANK = AC_CASH.IDENT_PAYMENTBANK
            LEFT JOIN PARTICIPANT ACCOUNTOPERATOR ON ACCOUNTOPERATOR.IDENT_STAKEHOLDER = AC_COMPOSITE.IDENT_OPERATOR
            LEFT JOIN (
            SELECT REG.CODE, PRA.IDENT_CAPACITY
            FROM PARTICIPANT REG
            JOIN PARTICIPANTROLEASSIGNMENT PRA ON REG.IDENT_STAKEHOLDER = PRA.IDENT_STAKEHOLDER
            WHERE PRA.IDENT_CAPACITY = 214
            ) REG ON SUBSTR(AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE ,1,5) = REG.CODE
            LEFT JOIN INVESTOR HOLDER ON HOLDER.IDENT_STAKEHOLDER = AC_COMPOSITE.IDENT_HOLDER
            LEFT JOIN INVESTOREXT HOLDEREXT ON HOLDEREXT.IDENT_INVESTOR = HOLDER.IDENT_STAKEHOLDER
            LEFT JOIN (
            SELECT RESTR.*, 
            ROW_NUMBER() OVER (PARTITION BY restr.IDENT_ACCOUNTCOMPOSITE ORDER BY RESTR.VALIDTO DESC, restr.IDENT_RESTRICTIONORDER ASC) AS RROW 
            FROM RESTRICTIONORDER RESTR
            WHERE RESTR.IDENT_MASTER IS NULL AND RESTR.RESTRICTWHOLEACCOUNT = 1
            AND RESTR.IDENT_ACTIVATIONTYPE = 1) RESTR
            ON RESTR.IDENT_ACCOUNTCOMPOSITE = AC_COMPOSITE.IDENT_ACCOUNTCOMPOSITE AND RROW = 1
            WHERE AC_COMPOSITE.IDENT_MASTER IS NULL AND AC_COMPOSITE.IDENT_ACTIVATIONTYPE != 5
            AND (AC_CASH.IDENT_ACCOUNTTYPE != 4 OR AC_CASH.IDENT_ACCOUNTTYPE IS NULL OR AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE = 'KSEI1BSB100172')
            AND  AC_COMPOSITE.ACCOUNTIDENTIFIERVALUE NOT IN ('KBA00000000001');
            
--------------------------------------------------------
--  DDL for View CAMEMBERS
--------------------------------------------------------

  CREATE OR REPLACE VIEW "CAMEMBERS" ("ID_CAM", "ACCT_ID_ACCT", "LST_UPD_TS") AS SELECT PART.CODE AS ID_CAM, AC.ACCOUNTIDENTIFIERVALUE AS ACCT_ID_ACCT,
            NVL(AC.REVISION_EFFECTIVE_FROM, AC.LASTUPDATETIME) AS LST_UPD_TS
            FROM PARTICIPANT PART, ACCOUNTCOMPOSITE AC
            LEFT JOIN ACCOUNTCOMPOSITEEXT ACE ON AC.IDENT_ACCOUNTCOMPOSITE = ACE.IDENT_ACCOUNTCOMPOSITE
            WHERE AC.IDENT_OPERATOR = PART.IDENT_STAKEHOLDER
            AND AC.IDENT_MASTER IS NULL
            AND ACE.CORPORATEACTION = 1;
--------------------------------------------------------
--  DDL for View CASECURITIES_CA
--------------------------------------------------------

  CREATE OR REPLACE VIEW "CASECURITIES_CA" ("ID_CASEC_XCSD", "CODE_CALC_MET", "CODE_FRE_PAY", "DAT_CLO", "DAT_EAR_RED", "DAT_ISSUED", "DAT_OPE", "DAT_PREALI", "DAT_VAL", "LST_UPD_TS", "RATE_INT", "TYP_RATE") AS SELECT INSTR.IDENT_INSTRUMENT AS ID_CASEC_XCSD,
            CASE WHEN CAINSTR.IDENT_ACCRUALCONVENTION IS NULL THEN NULL
            WHEN CAINSTR.IDENT_ACCRUALCONVENTION = 1 THEN 1
            WHEN CAINSTR.IDENT_ACCRUALCONVENTION = 4 THEN 2
            WHEN CAINSTR.IDENT_ACCRUALCONVENTION = 5 THEN 3
            WHEN CAINSTR.IDENT_ACCRUALCONVENTION = 6 THEN 5 END
            AS CODE_CALC_MET,
            CASE WHEN CAINSTR.IDENT_INTERESTPAYMENTFREQUENCY = 1 THEN 1
            WHEN CAINSTR.IDENT_INTERESTPAYMENTFREQUENCY = 2 THEN 2
            WHEN CAINSTR.IDENT_INTERESTPAYMENTFREQUENCY = 3 THEN 4
            WHEN CAINSTR.IDENT_INTERESTPAYMENTFREQUENCY = 4 THEN 7
            WHEN CAINSTR.IDENT_INTERESTPAYMENTFREQUENCY = 5 THEN 9
            WHEN CAINSTR.IDENT_INTERESTPAYMENTFREQUENCY = 7 THEN 16 END
            AS CODE_FRE_PAY,
            CAST(NULL AS DATE) AS DAT_CLO,
            CAINSTR.FIRSTINTERESTPERIODENDDATE AS DAT_EAR_RED,
            INSTR.ISSUEDATE AS DAT_ISSUED,
            CAINSTR.FIRSTINTERESTPERIODSTARTDATE AS DAT_OPE,
            CAST(NULL AS DATE) AS DAT_PREALI,
            CAST(NULL AS DATE) AS DAT_VAL,
            INSTR.LASTUPDATETIME AS LST_UPD_TS,
            CAINSTR.ANNUALINTERESTRATE AS RATE_INT,
            CASE WHEN CAINSTR.IDENT_RATETYPE = 1 THEN 1
            WHEN CAINSTR.IDENT_RATETYPE = 2 THEN 2
            WHEN CAINSTR.IDENT_RATETYPE = 3 THEN 1 END AS TYP_RATE
            FROM INSTRUMENT INSTR LEFT JOIN CAINSTRUMENTDEBT CAINSTR ON CAINSTR.IDENT_CAINSTRUMENT = INSTR.IDENT_CAINSTRUMENT
            WHERE INSTR.IDENT_MASTER IS NULL AND INSTR.NAME != 'IDR';
--------------------------------------------------------
--  DDL for View INSTRUCTIONS
--------------------------------------------------------

  CREATE OR REPLACE VIEW "INSTRUCTIONS" ("AMT_INST_CASH", "AMT_INST_SEC", "CODE_INST_PRIO", "CODE_STA", "PARTYONHOLD", "DAT_SETTLE", "DAT_TRADE", "EXT_REF", "FLG_CAN", "FLG_MATCH", "ID_INST_XCSD", "LST_UPD_TS", "TYP_INST", "FREE_DSC", "MEM_ID_MEM_XCSD", "MEM_ID_MEM_XCSD_COUNTERPART", "ACCT_ID", "ACCT_ID_ACCT_COUNTERPART", "INS_ID_INS_XCSD", "CURRENCY_CODE", "INST_ID_INST_XCSD", "EXT_BAN_ACCT", "DAT_REI", "INST_ID_INST_CAPCO_SETTINSTR", "CODE_BR", "ACCT_ID_ACCT_CAPCO_CASH", "SETTLEMENT_REASON", "PURPOSE", "TRADE_REF") AS 
  SELECT "AMT_INST_CASH","AMT_INST_SEC","CODE_INST_PRIO","CODE_STA","PARTYONHOLD","DAT_SETTLE","DAT_TRADE","EXT_REF","FLG_CAN","FLG_MATCH","ID_INST_XCSD","LST_UPD_TS","TYP_INST","FREE_DSC","MEM_ID_MEM_XCSD","MEM_ID_MEM_XCSD_COUNTERPART","ACCT_ID","ACCT_ID_ACCT_COUNTERPART","INS_ID_INS_XCSD","CURRENCY_CODE","INST_ID_INST_XCSD","EXT_BAN_ACCT","DAT_REI","INST_ID_INST_CAPCO_SETTINSTR","CODE_BR","ACCT_ID_ACCT_CAPCO_CASH","SETTLEMENT_REASON","PURPOSE","TRADE_REF" FROM (
            SELECT
            NVL(SI.AMOUNT,0) AS AMT_INST_CASH,
            NVL(SI.VOLUME,0) AS AMT_INST_SEC,
            2 AS CODE_INST_PRIO,
            CASE WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'
            AND (SI.IDENT_INSTRUCTIONTYPE NOT IN (12,14) OR SI.IDENT_INSTRUCTIONTYPE IS NULL) THEN 116 -- SETTLED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 12 THEN 104 -- DEPOSITED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 14 THEN 114 -- WITHDRAWN
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED'  AND SI.IDENT_INSTRUCTIONSTATUSREASON = 43 THEN 149 -- DROPPED
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONSTATUSREASON = 35 THEN 107 -- OVERDUE
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE IN (1, 21) AND SI.IDENT_INSTRUCTIONSTATUSREASON = 45 THEN 113 -- REFUSED (WT)            
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE NOT IN  (1, 21) AND  SI.IDENT_INSTRUCTIONSTATUSREASON <> 45 THEN 112 -- CANCELLED
            WHEN SI.INSTRUCTIONSTATUS = 'PENDING' AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (1,2,9,10)  THEN 108 -- FAILED (LACK OF BALANCES)
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED') AND SI.PARTYONHOLD = 1 AND SI.IDENT_MATCHINGSTATUS = 2  THEN 101 -- MATCHED PENDING APPROVE
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED') AND SI.PARTYONHOLD = 0 AND SI.IDENT_MATCHINGSTATUS = 2  THEN 101 -- 'MATCHED'
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED') AND SI.IDENT_MATCHINGSTATUS IN (0,1) AND SI.PARTYONHOLD = 1 THEN 101 -- PENDING APPROVE
            WHEN SI.INSTRUCTIONSTATUS = 'ACCEPTED' AND (SI.IDENT_MATCHINGSTATUS IN (0, 1)
            OR SI.IDENT_MATCHINGSTATUS IS NULL) THEN 121 -- UNMATCHED
            WHEN SI.INSTRUCTIONSTATUS IN ('ACCEPTED', 'MATCHED') AND SI.PARTYONHOLD = 0 AND (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE VALIDFROM = (SELECT MAX(VALIDFROM) FROM OPERATINGDATE)) < SI.SETTLEMENTDATE THEN 102 -- READY FOR POSITIONING (SETT DATE IN THE FUTURE)
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED')  AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (14,16) THEN 101 -- VALIDATED
            ELSE 0 END AS CODE_STA,
            SI.PARTYONHOLD,
            NVL(TRUNC(SI.EFFECTIVESETTLEMENTDATE), SI.SETTLEMENTDATE) AS DAT_SETTLE,
            SI.TRADEDATE AS DAT_TRADE,
            CASE WHEN SI.INSTRUCTIONREFERENCE LIKE 'CI%' AND SI.IDENT_INSTRUMENT = 0 THEN SI.COMMONREFERENCE
            ELSE SI.INSTRUCTIONREFERENCE END AS EXT_REF,
            CASE WHEN SI.IDENT_CANCELLATIONSTATUS = 2 THEN 1
            ELSE 0 END AS FLG_CAN,
            CASE WHEN SI.IDENT_MATCHINGSTATUS IN (0,1) THEN 0
            ELSE 1 END AS FLG_MATCH,
            SI.IDENT_SETTLEMENTINSTRUCTION AS ID_INST_XCSD,
            NVL(SI.EFFECTIVESETTLEMENTDATE,SI.SYSMODIFIED) AS LST_UPD_TS,
            CASE WHEN SI.IDENT_INSTRUCTIONTYPE = 1 THEN 90 -- REALIGN
            WHEN SI.IDENT_INSTRUCTIONTYPE = 2 THEN 80 -- COLDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 3 THEN 5 -- DFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 4 THEN 25 -- DFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 5 THEN 2 -- DVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 6 THEN 23 -- DVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 7 THEN 93 -- LENDDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 8 THEN 4 -- RFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 9 THEN 26 -- RFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 10 THEN 3 -- RVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 11 THEN 24 -- RVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 12 THEN 9 -- DCONF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 13 THEN 10 -- SECTRS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 14 THEN 6 -- SECW
            WHEN SI.IDENT_INSTRUCTIONTYPE = 17 THEN 17 -- SYNC
            WHEN SI.IDENT_INSTRUCTIONTYPE = 18 THEN 12 -- BTS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 19 THEN 15 -- CNF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 21 THEN 11 -- WT
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'VCA/%' THEN 72 -- VCA
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'RED/%' THEN 71 -- CAREM
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            THEN 70 -- TECH
            ELSE 0 END AS TYP_INST,
            DE.DESCRIPTION AS FREE_DSC,
            P.CODE AS MEM_ID_MEM_XCSD,
            P2.CODE AS MEM_ID_MEM_XCSD_COUNTERPART,
            NVL(AG.ACCOUNTIDENTIFIERVALUE, AG2.ACCOUNTIDENTIFIERVALUE) AS ACCT_ID,
            CAST (NULL AS VARCHAR2(10)) AS ACCT_ID_ACCT_COUNTERPART,
            CASE WHEN SI.IDENT_INSTRUMENT = 0 THEN CAST (NULL AS VARCHAR2(10))
            ELSE INS.NAME END AS INS_ID_INS_XCSD,
            CU.CODE AS CURRENCY_CODE,
            SIM.IDENT_SETTLEMENTINSTRUCTION AS INST_ID_INST_XCSD,
            CAST (NULL AS VARCHAR2(10)) AS EXT_BAN_ACCT,
            CAST (NULL AS DATE) AS DAT_REI,
            CAST (NULL AS VARCHAR2(10)) AS INST_ID_INST_CAPCO_SETTINSTR,
            CAST (NULL AS NUMBER) AS CODE_BR,
            CASE WHEN SI.IDENT_ACCOUNT IS NOT NULL THEN AG2.ACCOUNTIDENTIFIERVALUE
            ELSE NULL END AS ACCT_ID_ACCT_CAPCO_CASH,
            CASE WHEN SI.IDENT_TRANSACTIONTYPE = 52 THEN 1004 -- BART
            WHEN SI.IDENT_TRANSACTIONTYPE IN (26, 27) THEN 1013 -- COLL
            WHEN SI.IDENT_TRANSACTIONTYPE = 28 THEN 1023 -- CONV
            WHEN SI.IDENT_TRANSACTIONTYPE = 53 THEN 1008 -- GIFT
            WHEN SI.IDENT_TRANSACTIONTYPE = 50 THEN 1002 -- GRAN
            WHEN SI.IDENT_TRANSACTIONTYPE = 51 THEN 1003 -- HERI
            WHEN SI.IDENT_TRANSACTIONTYPE = 4 THEN 1021 -- IPO
            WHEN SI.IDENT_TRANSACTIONTYPE = 55 THEN 1020 -- MSOP
            WHEN SI.IDENT_TRANSACTIONTYPE = 56 THEN 1010 -- OTHR
            WHEN SI.IDENT_TRANSACTIONTYPE IN (8,2) THEN 1016 -- OWNE
            WHEN SI.IDENT_TRANSACTIONTYPE = 5 THEN 1006 -- REDM
            WHEN SI.IDENT_TRANSACTIONTYPE IN (12,13) THEN 1022 -- REPO
            WHEN SI.IDENT_TRANSACTIONTYPE IN (40, 41) THEN 1007 -- SELB
            WHEN SI.IDENT_TRANSACTIONTYPE = 14 THEN 1005 -- SUBS
            WHEN SI.IDENT_TRANSACTIONTYPE = 1 THEN 1001 -- TRAD
            WHEN SI.IDENT_TRANSACTIONTYPE = 54 THEN 1009 -- VERD
            END AS SETTLEMENT_REASON,
            CAST (NULL AS NUMBER) AS PURPOSE,
            SI.TRADEREFERENCE AS TRADE_REF
            FROM SETTLEMENTINSTRUCTION SI
            LEFT JOIN PARTICIPANT CSDOFCOUNTERPARTY ON SI.IDENT_CSDOFCOUNTERPARTY = CSDOFCOUNTERPARTY.IDENT_STAKEHOLDER
            LEFT JOIN PARTICIPANT CSDOFACCOUNTSERVICING ON SI.IDENT_CSDOFACCOUNTSERVICING = CSDOFACCOUNTSERVICING.IDENT_STAKEHOLDER
            LEFT JOIN PARTICIPANT P ON  SI.IDENT_ACCOUNTSERVICING = P.IDENT_STAKEHOLDER
            LEFT JOIN CURRENCY CU ON SI.IDENT_CURRENCY = CU.IDENT_CURRENCY
            LEFT JOIN SETTLEMENTINSTRUCTIONDETAILS DE ON SI.IDENT_SETTLEMENTINSTRUCTION = DE.IDENT_SETTLEMENTINSTRUCTION
            LEFT JOIN SECURITIESACCOUNT SA ON SI.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG ON SA.IDENT_ACCOUNTCOMPOSITE = AG.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA ON SI.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG2 ON CA.IDENT_ACCOUNTCOMPOSITE = AG2.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN (
            SELECT SIM.*
            FROM SETTLEMENTINSTRUCTION SIM WHERE SIM.MATCHINGREFERENCE != 0
            ) SIM ON SI.MATCHINGREFERENCE = SIM.MATCHINGREFERENCE
            LEFT JOIN PARTICIPANT P2 ON SI.IDENT_COUNTERPART = P2.IDENT_STAKEHOLDER
            LEFT JOIN INSTRUMENT INS ON SI.IDENT_INSTRUMENT = INS.IDENT_INSTRUMENT
            LEFT JOIN INSTRUCTIONTYPE INSTYPE ON SI.IDENT_INSTRUCTIONTYPE = INSTYPE.IDENT_INSTRUCTIONTYPE
            WHERE INSTYPE.CODE IN (
            'DFOP', 'DVP', 'RFOP', 'RVP'
            )
            AND (
            SI.MATCHINGREFERENCE = 0 OR
            SI.IDENT_SETTLEMENTINSTRUCTION != SIM.IDENT_SETTLEMENTINSTRUCTION
            )
            AND INS.IDENT_MASTER IS NULL
            AND AG.IDENT_MASTER IS NULL
            AND AG2.IDENT_MASTER IS NULL
            )
            WHERE TRUNC(LST_UPD_TS) = (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE))
            UNION
            SELECT "AMT_INST_CASH","AMT_INST_SEC","CODE_INST_PRIO","CODE_STA","PARTYONHOLD","DAT_SETTLE","DAT_TRADE","EXT_REF","FLG_CAN","FLG_MATCH","ID_INST_XCSD","LST_UPD_TS","TYP_INST","FREE_DSC","MEM_ID_MEM_XCSD","MEM_ID_MEM_XCSD_COUNTERPART","ACCT_ID","ACCT_ID_ACCT_COUNTERPART","INS_ID_INS_XCSD","CURRENCY_CODE","INST_ID_INST_XCSD","EXT_BAN_ACCT","DAT_REI","INST_ID_INST_CAPCO_SETTINSTR","CODE_BR","ACCT_ID_ACCT_CAPCO_CASH","SETTLEMENT_REASON","PURPOSE","TRADE_REF" FROM (
            SELECT
            NVL(SI.AMOUNT,0) AS AMT_INST_CASH,
            NVL(SI.VOLUME,0) AS AMT_INST_SEC,
            2 AS CODE_INST_PRIO,
            CASE WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'
            AND (SI.IDENT_INSTRUCTIONTYPE NOT IN (12,14) OR SI.IDENT_INSTRUCTIONTYPE IS NULL) THEN 116 -- SETTLED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 12 THEN 104 -- DEPOSITED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 14 THEN 114 -- WITHDRAWN
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED'  AND SI.IDENT_INSTRUCTIONSTATUSREASON = 43 THEN 149 -- DROPPED
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONSTATUSREASON = 35 THEN 107 -- OVERDUE
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE IN (1, 21) AND SI.IDENT_INSTRUCTIONSTATUSREASON = 45 THEN 113 -- REFUSED (WT)
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE NOT IN  (1, 21) AND  SI.IDENT_INSTRUCTIONSTATUSREASON <> 45 THEN 112 -- CANCELLED
            WHEN SI.INSTRUCTIONSTATUS = 'PENDING' AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (1,2,9,10)  THEN 108 -- FAILED (LACK OF BALANCES)
            WHEN SI.INSTRUCTIONSTATUS = 'ACCEPTED' AND SI.PARTYONHOLD = 0 AND (SI.IDENT_MATCHINGSTATUS IN (0, 1)
            OR SI.IDENT_MATCHINGSTATUS IS NULL) THEN 121 -- UNMATCHED
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED') AND SI.IDENT_MATCHINGSTATUS = 2
            AND (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)) < SI.SETTLEMENTDATE THEN 102 -- 'READY FOR POSITIONING' -- (SETT DATE IN THE FUTURE)
                WHEN SI.IDENT_INSTRUCTIONTYPE IN  (1, 19, 20, 21) AND SI.INSTRUCTIONSTATUS NOT IN ('SETTLED', 'CANCELLED') AND  SI.IDENT_INSTRUCTIONSTATUSREASON IN (7) THEN  109 -- WAITING FOR CONFIRMATION  -- WT, REALIGN, CNF, SWEEP OUT
            WHEN (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)) >= SI.SETTLEMENTDATE THEN 108 -- FAILED (SETT DATE IN THE PAST)
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED')  AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (14,16) THEN 101 -- VALIDATED
            ELSE 0 END AS CODE_STA,
            SI.PARTYONHOLD,
            NVL(TRUNC(SI.EFFECTIVESETTLEMENTDATE), SI.SETTLEMENTDATE) AS DAT_SETTLE,
            SI.TRADEDATE AS DAT_TRADE,
            CASE WHEN SI.INSTRUCTIONREFERENCE LIKE 'CI%' AND SI.IDENT_INSTRUMENT = 0 THEN SI.COMMONREFERENCE
            ELSE SI.INSTRUCTIONREFERENCE END AS EXT_REF,
            CASE WHEN SI.IDENT_CANCELLATIONSTATUS = 2 THEN 1
            ELSE 0 END AS FLG_CAN,
            CASE WHEN SI.IDENT_MATCHINGSTATUS IN (0,1) THEN 0
            ELSE 1 END AS FLG_MATCH,
            SI.IDENT_SETTLEMENTINSTRUCTION AS ID_INST_XCSD,
            NVL(SI.EFFECTIVESETTLEMENTDATE,SI.SYSMODIFIED) AS LST_UPD_TS,
            CASE WHEN SI.IDENT_INSTRUCTIONTYPE = 1 THEN 90 -- REALIGN
            WHEN SI.IDENT_INSTRUCTIONTYPE = 2 THEN 80 -- COLDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 3 THEN 5 -- DFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 4 THEN 25 -- DFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 5 THEN 2 -- DVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 6 THEN 23 -- DVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 7 THEN 93 -- LENDDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 8 THEN 4 -- RFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 9 THEN 26 -- RFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 10 THEN 3 -- RVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 11 THEN 24 -- RVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 12 THEN 9 -- DCONF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 13 THEN 10 -- SECTRS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 14 THEN 6 -- SECW
            WHEN SI.IDENT_INSTRUCTIONTYPE = 17 THEN 17 -- SYNC
            WHEN SI.IDENT_INSTRUCTIONTYPE = 18 THEN 12 -- BTS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 19 THEN 15 -- CNF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 21 THEN 11 -- WT
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'VCA/%' THEN 72 -- VCA
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'RED/%' THEN 71 -- CAREM
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            THEN 70 -- TECH
            ELSE 0 END AS TYP_INST,
            DE.DESCRIPTION AS FREE_DSC,
            P.CODE AS MEM_ID_MEM_XCSD,
            P2.CODE AS MEM_ID_MEM_XCSD_COUNTERPART,
            NVL(AG.ACCOUNTIDENTIFIERVALUE, AG1.ACCOUNTIDENTIFIERVALUE) AS ACCT_ID,
            NVL(AG2.ACCOUNTIDENTIFIERVALUE, AG21.ACCOUNTIDENTIFIERVALUE) AS ACCT_ID_ACCT_COUNTERPART,
            CASE WHEN SI.IDENT_INSTRUMENT = 0 THEN CAST (NULL AS VARCHAR2(10))
            ELSE INS.NAME END AS INS_ID_INS_XCSD,
            CU.CODE AS CURRENCY_CODE,
            SIM.IDENT_SETTLEMENTINSTRUCTION AS INST_ID_INST_XCSD,
            CAST (NULL AS VARCHAR2(10)) AS EXT_BAN_ACCT,
            CAST (NULL AS DATE) AS DAT_REI,
            CAST (NULL AS VARCHAR2(10)) AS INST_ID_INST_CAPCO_SETTINSTR,
            CAST (NULL AS NUMBER) AS CODE_BR,
            CASE WHEN SI.IDENT_ACCOUNT IS NOT NULL THEN AG2.ACCOUNTIDENTIFIERVALUE
            ELSE NULL END AS ACCT_ID_ACCT_CAPCO_CASH,
            CAST (NULL AS NUMBER)  AS SETTLEMENT_REASON,
            CAST (NULL AS NUMBER) AS PURPOSE,
            CAST (NULL AS VARCHAR2(10)) AS TRADE_REF
            FROM SETTLEMENTINSTRUCTION SI
            LEFT JOIN PARTICIPANT P ON  SI.IDENT_ACCOUNTSERVICING = P.IDENT_STAKEHOLDER
            LEFT JOIN CURRENCY CU ON SI.IDENT_CURRENCY = CU.IDENT_CURRENCY
            LEFT JOIN SETTLEMENTINSTRUCTIONDETAILS DE ON SI.IDENT_SETTLEMENTINSTRUCTION = DE.IDENT_SETTLEMENTINSTRUCTION
            LEFT JOIN SECURITIESACCOUNT SA ON SI.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG ON SA.IDENT_ACCOUNTCOMPOSITE = AG.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA ON SI.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG1 ON CA.IDENT_ACCOUNTCOMPOSITE = AG1.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN (
            SELECT SIM.*
            FROM SETTLEMENTINSTRUCTION SIM WHERE SIM.MATCHINGREFERENCE != 0
            AND (SIM.IDENT_PAYMENTDIRECTION = 2 OR SIM.IDENT_SECURITIESMOVEMENT = 2)
            ) SIM ON SI.MATCHINGREFERENCE = SIM.MATCHINGREFERENCE
            LEFT JOIN PARTICIPANT P2 ON SI.IDENT_COUNTERPART = P2.IDENT_STAKEHOLDER
            LEFT JOIN SECURITIESACCOUNT SA2 ON SIM.IDENT_ACCOUNT = SA2.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG2 ON SA2.IDENT_ACCOUNTCOMPOSITE = AG2.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA2 ON SIM.IDENT_CASHACCOUNT = CA2.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG21 ON CA2.IDENT_ACCOUNTCOMPOSITE = AG21.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN INSTRUMENT INS ON SI.IDENT_INSTRUMENT = INS.IDENT_INSTRUMENT
            LEFT JOIN INSTRUCTIONTYPE INSTYPE ON SI.IDENT_INSTRUCTIONTYPE = INSTYPE.IDENT_INSTRUCTIONTYPE
            WHERE INSTYPE.CODE IN (
            'REALGN', 'COLDS', 'LENDDS', 'SECD', 'SECTRS', 'SECW', 'CSTR','BTS', 'CNF', 'SWPAI', 'WT', 'DCNF'
            )
            AND (
            SI.MATCHINGREFERENCE = 0 OR
            SI.IDENT_SETTLEMENTINSTRUCTION != SIM.IDENT_SETTLEMENTINSTRUCTION
            )
            AND INS.IDENT_MASTER IS NULL
            AND AG.IDENT_MASTER IS NULL
            AND AG2.IDENT_MASTER IS NULL
            AND (SI.IDENT_PAYMENTDIRECTION = 1 OR SI.IDENT_SECURITIESMOVEMENT = 1)
            )
            WHERE TRUNC(LST_UPD_TS) = (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE))
            UNION
			SELECT "AMT_INST_CASH","AMT_INST_SEC","CODE_INST_PRIO","CODE_STA","PARTYONHOLD","DAT_SETTLE","DAT_TRADE","EXT_REF","FLG_CAN","FLG_MATCH","ID_INST_XCSD","LST_UPD_TS","TYP_INST","FREE_DSC","MEM_ID_MEM_XCSD","MEM_ID_MEM_XCSD_COUNTERPART","ACCT_ID","ACCT_ID_ACCT_COUNTERPART","INS_ID_INS_XCSD","CURRENCY_CODE","INST_ID_INST_XCSD","EXT_BAN_ACCT","DAT_REI","INST_ID_INST_CAPCO_SETTINSTR","CODE_BR","ACCT_ID_ACCT_CAPCO_CASH","SETTLEMENT_REASON","PURPOSE","TRADE_REF" FROM (
            SELECT
            NVL(SI.AMOUNT,0) AS AMT_INST_CASH,
            NVL(SI.VOLUME,0) AS AMT_INST_SEC,
            2 AS CODE_INST_PRIO,
            CASE WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'
            AND (SI.IDENT_INSTRUCTIONTYPE NOT IN (12,14) OR SI.IDENT_INSTRUCTIONTYPE IS NULL) THEN 116 -- SETTLED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 12 THEN 104 -- DEPOSITED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 14 THEN 114 -- WITHDRAWN
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED'  AND SI.IDENT_INSTRUCTIONSTATUSREASON = 43 THEN 149 -- DROPPED
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONSTATUSREASON = 35 THEN 107 -- OVERDUE
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE IN (1, 21) AND SI.IDENT_INSTRUCTIONSTATUSREASON = 45 THEN 113 -- REFUSED (WT)
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE NOT IN  (1, 21) AND  SI.IDENT_INSTRUCTIONSTATUSREASON <> 45 THEN 112 -- CANCELLED
            WHEN SI.INSTRUCTIONSTATUS = 'PENDING' AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (1,2,9,10)  THEN 108 -- FAILED (LACK OF BALANCES)
            WHEN SI.INSTRUCTIONSTATUS = 'ACCEPTED' AND SI.PARTYONHOLD = 0 AND (SI.IDENT_MATCHINGSTATUS IN (0, 1)
            OR SI.IDENT_MATCHINGSTATUS IS NULL) THEN 121 -- UNMATCHED
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED') AND SI.IDENT_MATCHINGSTATUS = 2
            AND (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)) < SI.SETTLEMENTDATE THEN 102 -- 'READY FOR POSITIONING' -- (SETT DATE IN THE FUTURE)
            WHEN SI.IDENT_INSTRUCTIONTYPE IN  (1, 19, 20, 21) AND SI.INSTRUCTIONSTATUS NOT IN ('SETTLED', 'CANCELLED') AND  SI.IDENT_INSTRUCTIONSTATUSREASON IN (7) THEN  109 -- WAITING FOR CONFIRMATION  -- WT, REALIGN, CNF, SWEEP OUT
            WHEN (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)) >= SI.SETTLEMENTDATE THEN 108 -- FAILED (SETT DATE IN THE PAST)
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED')  AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (14,16) THEN 101 -- VALIDATED
            ELSE 0 END AS CODE_STA,
            SI.PARTYONHOLD,
            NVL(TRUNC(SI.EFFECTIVESETTLEMENTDATE), SI.SETTLEMENTDATE) AS DAT_SETTLE,
            SI.TRADEDATE AS DAT_TRADE,
            CASE WHEN SI.INSTRUCTIONREFERENCE LIKE 'CI%' AND SI.IDENT_INSTRUMENT = 0 THEN SI.COMMONREFERENCE
            ELSE SI.INSTRUCTIONREFERENCE END AS EXT_REF,
            CASE WHEN SI.IDENT_CANCELLATIONSTATUS = 2 THEN 1
            ELSE 0 END AS FLG_CAN,
            CASE WHEN SI.IDENT_MATCHINGSTATUS IN (0,1) THEN 0
            ELSE 1 END AS FLG_MATCH,
            SI.IDENT_SETTLEMENTINSTRUCTION AS ID_INST_XCSD,
            NVL(SI.EFFECTIVESETTLEMENTDATE,SI.SYSMODIFIED) AS LST_UPD_TS,
            CASE WHEN SI.IDENT_INSTRUCTIONTYPE = 1 THEN 90 -- REALIGN
            WHEN SI.IDENT_INSTRUCTIONTYPE = 2 THEN 80 -- COLDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 3 THEN 5 -- DFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 4 THEN 25 -- DFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 5 THEN 2 -- DVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 6 THEN 23 -- DVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 7 THEN 93 -- LENDDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 8 THEN 4 -- RFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 9 THEN 26 -- RFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 10 THEN 3 -- RVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 11 THEN 24 -- RVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 12 THEN 9 -- DCONF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 13 THEN 10 -- SECTRS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 14 THEN 6 -- SECW
            WHEN SI.IDENT_INSTRUCTIONTYPE = 17 THEN 17 -- SYNC
            WHEN SI.IDENT_INSTRUCTIONTYPE = 18 THEN 12 -- BTS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 19 THEN 15 -- CNF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 21 THEN 11 -- WT
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'VCA/%' THEN 72 -- VCA
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'RED/%' THEN 71 -- CAREM
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            THEN 70 -- TECH
            ELSE 0 END AS TYP_INST,
            DE.DESCRIPTION AS FREE_DSC,
            P.CODE AS MEM_ID_MEM_XCSD,
            P2.CODE AS MEM_ID_MEM_XCSD_COUNTERPART,
            NVL(AG.ACCOUNTIDENTIFIERVALUE, AG1.ACCOUNTIDENTIFIERVALUE) AS ACCT_ID,
            NVL(AG2.ACCOUNTIDENTIFIERVALUE, AG21.ACCOUNTIDENTIFIERVALUE) AS ACCT_ID_ACCT_COUNTERPART,
            CASE WHEN SI.IDENT_INSTRUMENT = 0 THEN CAST (NULL AS VARCHAR2(10))
            ELSE INS.NAME END AS INS_ID_INS_XCSD,
            CU.CODE AS CURRENCY_CODE,
            SIM.IDENT_SETTLEMENTINSTRUCTION AS INST_ID_INST_XCSD,
            CAST (NULL AS VARCHAR2(10)) AS EXT_BAN_ACCT,
            CAST (NULL AS DATE) AS DAT_REI,
            CAST (NULL AS VARCHAR2(10)) AS INST_ID_INST_CAPCO_SETTINSTR,
            CAST (NULL AS NUMBER) AS CODE_BR,
            CASE WHEN SI.IDENT_ACCOUNT IS NOT NULL THEN AG2.ACCOUNTIDENTIFIERVALUE
            ELSE NULL END AS ACCT_ID_ACCT_CAPCO_CASH,
            CAST (NULL AS NUMBER)  AS SETTLEMENT_REASON,
            CAST (NULL AS NUMBER) AS PURPOSE,
            CAST (NULL AS VARCHAR2(10)) AS TRADE_REF
            FROM SETTLEMENTINSTRUCTION SI
            LEFT JOIN PARTICIPANT P ON  SI.IDENT_ACCOUNTSERVICING = P.IDENT_STAKEHOLDER
            LEFT JOIN CURRENCY CU ON SI.IDENT_CURRENCY = CU.IDENT_CURRENCY
            LEFT JOIN SETTLEMENTINSTRUCTIONDETAILS DE ON SI.IDENT_SETTLEMENTINSTRUCTION = DE.IDENT_SETTLEMENTINSTRUCTION
            LEFT JOIN SECURITIESACCOUNT SA ON SI.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG ON SA.IDENT_ACCOUNTCOMPOSITE = AG.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA ON SI.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG1 ON CA.IDENT_ACCOUNTCOMPOSITE = AG1.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN (
            SELECT SIM.*
            FROM SETTLEMENTINSTRUCTION SIM WHERE SIM.MATCHINGREFERENCE != 0
            AND (SIM.IDENT_PAYMENTDIRECTION = 1 OR SIM.IDENT_SECURITIESMOVEMENT = 1)
            ) SIM ON SI.MATCHINGREFERENCE = SIM.MATCHINGREFERENCE
            LEFT JOIN PARTICIPANT P2 ON SI.IDENT_COUNTERPART = P2.IDENT_STAKEHOLDER
            LEFT JOIN SECURITIESACCOUNT SA2 ON SIM.IDENT_ACCOUNT = SA2.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG2 ON SA2.IDENT_ACCOUNTCOMPOSITE = AG2.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA2 ON SIM.IDENT_CASHACCOUNT = CA2.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG21 ON CA2.IDENT_ACCOUNTCOMPOSITE = AG21.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN INSTRUMENT INS ON SI.IDENT_INSTRUMENT = INS.IDENT_INSTRUMENT
            LEFT JOIN INSTRUCTIONTYPE INSTYPE ON SI.IDENT_INSTRUCTIONTYPE = INSTYPE.IDENT_INSTRUCTIONTYPE
            WHERE INSTYPE.CODE IN (
             'SECD'
            )
            AND (
            SI.MATCHINGREFERENCE = 0 OR
            SI.IDENT_SETTLEMENTINSTRUCTION != SIM.IDENT_SETTLEMENTINSTRUCTION
            )
            AND INS.IDENT_MASTER IS NULL
            AND AG.IDENT_MASTER IS NULL
            AND AG2.IDENT_MASTER IS NULL
            AND (SI.IDENT_PAYMENTDIRECTION = 2 OR SI.IDENT_SECURITIESMOVEMENT = 2)
            )
            WHERE TRUNC(LST_UPD_TS) = (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE))
            UNION
            SELECT "AMT_INST_CASH","AMT_INST_SEC","CODE_INST_PRIO","CODE_STA","PARTYONHOLD","DAT_SETTLE","DAT_TRADE","EXT_REF","FLG_CAN","FLG_MATCH","ID_INST_XCSD","LST_UPD_TS","TYP_INST","FREE_DSC","MEM_ID_MEM_XCSD","MEM_ID_MEM_XCSD_COUNTERPART","ACCT_ID","ACCT_ID_ACCT_COUNTERPART","INS_ID_INS_XCSD","CURRENCY_CODE","INST_ID_INST_XCSD","EXT_BAN_ACCT","DAT_REI","INST_ID_INST_CAPCO_SETTINSTR","CODE_BR","ACCT_ID_ACCT_CAPCO_CASH","SETTLEMENT_REASON","PURPOSE","TRADE_REF" FROM (
            SELECT
            NVL(SI.AMOUNT,0) AS AMT_INST_CASH,
            NVL(SI.VOLUME,0) AS AMT_INST_SEC,
            2 AS CODE_INST_PRIO,
            CASE WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'
            AND (SI.IDENT_INSTRUCTIONTYPE NOT IN (12,14) OR SI.IDENT_INSTRUCTIONTYPE IS NULL) THEN 116 -- SETTLED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 12 THEN 104 -- DEPOSITED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 14 THEN 114 -- WITHDRAWN
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED'  AND SI.IDENT_INSTRUCTIONSTATUSREASON = 43 THEN 149 -- DROPPED
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONSTATUSREASON = 35 THEN 107 -- OVERDUE
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE IN (1, 21) AND SI.IDENT_INSTRUCTIONSTATUSREASON = 45 THEN 113 -- REFUSED (WT)            
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONTYPE NOT IN  (1, 21) AND  SI.IDENT_INSTRUCTIONSTATUSREASON <> 45 THEN 112 -- CANCELLED
            WHEN SI.INSTRUCTIONSTATUS = 'PENDING' AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (1,2,9,10)  THEN 108 -- FAILED (LACK OF BALANCES)
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED') AND SI.PARTYONHOLD = 1 AND SI.IDENT_MATCHINGSTATUS = 2  THEN 101 -- MATCHED PENDING APPROVE
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED') AND SI.PARTYONHOLD = 0 AND SI.IDENT_MATCHINGSTATUS = 2  THEN 101 -- 'MATCHED'
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED') AND SI.IDENT_MATCHINGSTATUS IN (0,1) AND SI.PARTYONHOLD = 1 THEN 101 -- PENDING APPROVE
            WHEN SI.INSTRUCTIONSTATUS = 'ACCEPTED' AND (SI.IDENT_MATCHINGSTATUS IN (0, 1)
            OR SI.IDENT_MATCHINGSTATUS IS NULL) THEN 121 -- UNMATCHED
            WHEN SI.INSTRUCTIONSTATUS IN ('ACCEPTED', 'MATCHED') AND SI.PARTYONHOLD = 0 AND (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE VALIDFROM = (SELECT MAX(VALIDFROM) FROM OPERATINGDATE)) < SI.SETTLEMENTDATE THEN 102 -- READY FOR POSITIONING (SETT DATE IN THE FUTURE)
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED')  AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (14,16) THEN 101 -- VALIDATED
            ELSE 0 END AS CODE_STA,
            SI.PARTYONHOLD,
            NVL(TRUNC(SI.EFFECTIVESETTLEMENTDATE), SI.SETTLEMENTDATE) AS DAT_SETTLE,
            SI.TRADEDATE AS DAT_TRADE,
            CASE WHEN SI.INSTRUCTIONREFERENCE LIKE 'CI%' AND SI.IDENT_INSTRUMENT = 0 THEN SI.COMMONREFERENCE
            ELSE SI.INSTRUCTIONREFERENCE END AS EXT_REF,
            CASE WHEN SI.IDENT_CANCELLATIONSTATUS = 2 THEN 1
            ELSE 0 END AS FLG_CAN,
            CASE WHEN SI.IDENT_MATCHINGSTATUS IN (0,1) THEN 0
            ELSE 1 END AS FLG_MATCH,
            SI.IDENT_SETTLEMENTINSTRUCTION AS ID_INST_XCSD,
            NVL(SI.EFFECTIVESETTLEMENTDATE,SI.SYSMODIFIED) AS LST_UPD_TS,
            CASE WHEN SI.IDENT_INSTRUCTIONTYPE = 1 THEN 90 -- REALIGN
            WHEN SI.IDENT_INSTRUCTIONTYPE = 2 THEN 80 -- COLDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 3 THEN 5 -- DFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 4 THEN 25 -- DFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 5 THEN 2 -- DVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 6 THEN 23 -- DVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 7 THEN 93 -- LENDDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 8 THEN 4 -- RFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 9 THEN 26 -- RFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 10 THEN 3 -- RVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 11 THEN 24 -- RVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 12 THEN 9 -- DCONF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 13 THEN 10 -- SECTRS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 14 THEN 6 -- SECW
            WHEN SI.IDENT_INSTRUCTIONTYPE = 17 THEN 17 -- SYNC
            WHEN SI.IDENT_INSTRUCTIONTYPE = 18 THEN 12 -- BTS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 19 THEN 15 -- CNF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 21 THEN 11 -- WT
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'VCA/%' THEN 72 -- VCA
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'RED/%' THEN 71 -- CAREM
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            THEN 70 -- TECH
            ELSE 0 END AS TYP_INST,
            DE.DESCRIPTION AS FREE_DSC,
            P.CODE AS MEM_ID_MEM_XCSD,
            P2.CODE AS MEM_ID_MEM_XCSD_COUNTERPART,
            NVL(AG.ACCOUNTIDENTIFIERVALUE, AG2.ACCOUNTIDENTIFIERVALUE) AS ACCT_ID,
            CAST (NULL AS VARCHAR2(10)) AS ACCT_ID_ACCT_COUNTERPART,
            CASE WHEN SI.IDENT_INSTRUMENT = 0 THEN CAST (NULL AS VARCHAR2(10))
            ELSE INS.NAME END AS INS_ID_INS_XCSD,
            CU.CODE AS CURRENCY_CODE,
            SIM.IDENT_SETTLEMENTINSTRUCTION AS INST_ID_INST_XCSD,
            CAST (NULL AS VARCHAR2(10)) AS EXT_BAN_ACCT,
            CAST (NULL AS DATE) AS DAT_REI,
            CAST (NULL AS VARCHAR2(10)) AS INST_ID_INST_CAPCO_SETTINSTR,
            CAST (NULL AS NUMBER) AS CODE_BR,
            CASE WHEN SI.IDENT_ACCOUNT IS NOT NULL THEN AG2.ACCOUNTIDENTIFIERVALUE
            ELSE NULL END AS ACCT_ID_ACCT_CAPCO_CASH,
            CASE WHEN SI.IDENT_TRANSACTIONTYPE = 52 THEN 1004 -- BART
            WHEN SI.IDENT_TRANSACTIONTYPE IN (26, 27) THEN 1013 -- COLL
            WHEN SI.IDENT_TRANSACTIONTYPE = 28 THEN 1023 -- CONV
            WHEN SI.IDENT_TRANSACTIONTYPE = 53 THEN 1008 -- GIFT
            WHEN SI.IDENT_TRANSACTIONTYPE = 50 THEN 1002 -- GRAN
            WHEN SI.IDENT_TRANSACTIONTYPE = 51 THEN 1003 -- HERI
            WHEN SI.IDENT_TRANSACTIONTYPE = 4 THEN 1021 -- IPO
            WHEN SI.IDENT_TRANSACTIONTYPE = 55 THEN 1020 -- MSOP
            WHEN SI.IDENT_TRANSACTIONTYPE = 56 THEN 1010 -- OTHR
            WHEN SI.IDENT_TRANSACTIONTYPE IN (8,2) THEN 1016 -- OWNE
            WHEN SI.IDENT_TRANSACTIONTYPE = 5 THEN 1006 -- REDM
            WHEN SI.IDENT_TRANSACTIONTYPE IN (12,13) THEN 1022 -- REPO
            WHEN SI.IDENT_TRANSACTIONTYPE IN (40, 41) THEN 1007 -- SELB
            WHEN SI.IDENT_TRANSACTIONTYPE = 14 THEN 1005 -- SUBS
            WHEN SI.IDENT_TRANSACTIONTYPE = 1 THEN 1001 -- TRAD
            WHEN SI.IDENT_TRANSACTIONTYPE = 54 THEN 1009 -- VERD
            END AS SETTLEMENT_REASON,
            CAST (NULL AS NUMBER) AS PURPOSE,
            SI.TRADEREFERENCE AS TRADE_REF
            FROM SETTLEMENTINSTRUCTION SI
            LEFT JOIN PARTICIPANT CSDOFCOUNTERPARTY ON SI.IDENT_CSDOFCOUNTERPARTY = CSDOFCOUNTERPARTY.IDENT_STAKEHOLDER
            LEFT JOIN PARTICIPANT CSDOFACCOUNTSERVICING ON SI.IDENT_CSDOFACCOUNTSERVICING = CSDOFACCOUNTSERVICING.IDENT_STAKEHOLDER
            LEFT JOIN PARTICIPANT P ON  SI.IDENT_ACCOUNTSERVICING = P.IDENT_STAKEHOLDER
            LEFT JOIN CURRENCY CU ON SI.IDENT_CURRENCY = CU.IDENT_CURRENCY
            LEFT JOIN SETTLEMENTINSTRUCTIONDETAILS DE ON SI.IDENT_SETTLEMENTINSTRUCTION = DE.IDENT_SETTLEMENTINSTRUCTION
            LEFT JOIN SECURITIESACCOUNT SA ON SI.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG ON SA.IDENT_ACCOUNTCOMPOSITE = AG.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA ON SI.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG2 ON CA.IDENT_ACCOUNTCOMPOSITE = AG2.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN (
            SELECT SIM.*
            FROM SETTLEMENTINSTRUCTION SIM WHERE SIM.MATCHINGREFERENCE != 0
            ) SIM ON SI.MATCHINGREFERENCE = SIM.MATCHINGREFERENCE
            LEFT JOIN PARTICIPANT P2 ON SI.IDENT_COUNTERPART = P2.IDENT_STAKEHOLDER
            LEFT JOIN INSTRUMENT INS ON SI.IDENT_INSTRUMENT = INS.IDENT_INSTRUMENT
            LEFT JOIN INSTRUCTIONTYPE INSTYPE ON SI.IDENT_INSTRUCTIONTYPE = INSTYPE.IDENT_INSTRUCTIONTYPE
            WHERE INSTYPE.CODE IS NULL
            AND SI.IDENT_TRANSACTIONTYPE = 3
            AND (
            SI.MATCHINGREFERENCE = 0 OR
            SI.IDENT_SETTLEMENTINSTRUCTION != SIM.IDENT_SETTLEMENTINSTRUCTION
            )
            AND INS.IDENT_MASTER IS NULL
            AND AG.IDENT_MASTER IS NULL
            AND AG2.IDENT_MASTER IS NULL
            )
            WHERE TRUNC(LST_UPD_TS) = (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE));
--------------------------------------------------------
--  DDL for View INSTRUMENT_CODES
--------------------------------------------------------

  CREATE OR REPLACE VIEW "INSTRUMENT_CODES" ("CODE_IC", "ID_IC_CAPCO", "LST_UPD_TS", "TYP_CODE_IC", "INS_ID_INS_CAPCO") AS 
	  SELECT ISIN CODE_IC, IDENT_INSTRUMENT ID_IC_CAPCO, NVL(LASTUPDATETIME, SYSMODIFIED) LST_UPD_TS, 1001 TYP_CODE_IC, NAME INS_ID_INS_CAPCO
	  FROM INSTRUMENT
	  WHERE IDENT_MASTER IS NULL
	  AND NAME != 'IDR';
--------------------------------------------------------
--  DDL for View INTEREST_PAYMENT_DATA
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "INTEREST_PAYMENT_DATA" ("AMT_OPER", "DAT_EXEC", "TYP_MVT", "LST_UPD_TS", "ID_ACT_CAPCO", "ID_ACCT_XCSD", "INS_ID_INS_XCSD", "BLNC_ID_BLNC_CAPCO", "TYP_BLNC", "INST_ID_INST_XCSD", "INST_ID_ACCT_CAPCO_COUNTERPART", "SYNC_ID_ACCT_CAPCO_COUNTERPART", "PRICE", "TYP_INST", "EXT_REF") AS 
  SELECT UNIQUE PM.AMT_OPER, PM.DAT_EXEC, PM.TYP_MVT, PM.LST_UPD_TS,
            PM.ID_ACT_CAPCO, AC.ID_ACCT ID_ACCT_XCSD, SEC.LOCAL_CODE INS_ID_INS_XCSD,
            PM.BLNC_ID_BLNC_CAPCO, PM.TYP_BLNC, PM.INST_ID_INST_XCSD,
            CAST(NULL AS VARCHAR2(40)) AS INST_ID_ACCT_CAPCO_COUNTERPART,
            CAST(NULL AS VARCHAR2(40)) AS SYNC_ID_ACCT_CAPCO_COUNTERPART,
            NVL(INST.PRICE_PERCENTAGE,0) AS PRICE,
            INST.TYP_INST,
            PM.EXT_REF
            FROM POSITION_MOVEMENTS PM
            JOIN SECURITIES_CA SEC ON PM.INSTRUMENT = SEC.LOCAL_CODE
            LEFT JOIN INSTRUMENT INS ON  SEC.ID_INS_XCSD = INS.IDENT_INSTRUMENT
            JOIN OTC_BOND INST ON PM.INST_ID_INST_XCSD = INST.ID_OTCBOND_XCSD
            JOIN ACCOUNTS_CA AC ON PM.ID_ACCT_XCSD = AC.ID_ACCT
            WHERE INST.CODE_STA = 116
            AND AC.TYP_FLG_ACCT = 1
            AND SEC.TYP_SEC IN (2,3,7,14,15,16,17,18) -- CORP BOND, GOV BOND, MTN, SBI, SBSN , SPN, SUKUK, EBA
            UNION
			SELECT UNIQUE PM.AMT_OPER, PM.DAT_EXEC, PM.TYP_MVT, PM.LST_UPD_TS,
			PM.ID_ACT_CAPCO, INST.ACCT_ID ID_ACCT_XCSD, SEC.LOCAL_CODE INS_ID_INS_XCSD,
			PM.BLNC_ID_BLNC_CAPCO, PM.TYP_BLNC, PM.INST_ID_INST_XCSD,
			CAST(NULL AS VARCHAR2(40)) AS INST_ID_ACCT_CAPCO_COUNTERPART,
			CAST(NULL AS VARCHAR2(40)) AS SYNC_ID_ACCT_CAPCO_COUNTERPART,
			CASE WHEN INS.VOLUMETYPE = 1 AND INST.AMT_INST_CASH > 0 THEN (INST.AMT_INST_SEC/INST.AMT_INST_CASH) * 100
			ELSE 0 END AS PRICE,
			INST.TYP_INST,
			PM.EXT_REF
			FROM POSITION_MOVEMENTS PM
			JOIN SECURITIES_CA SEC ON PM.INSTRUMENT = SEC.LOCAL_CODE
			LEFT JOIN INSTRUMENT INS ON  SEC.ID_INS_XCSD = INS.IDENT_INSTRUMENT
			LEFT JOIN ACCOUNTS_CA AC ON PM.ID_ACCT_XCSD = AC.ID_ACCT
			JOIN INSTRUCTIONS INST ON PM.INST_ID_INST_XCSD = INST.ID_INST_XCSD
			WHERE INST.CODE_STA IN (114, 104, 116)
			AND AC.TYP_FLG_ACCT = 1
			AND SEC.TYP_SEC IN (2,3,7,14,15,16,17,18) -- CORP BOND, GOV BOND, MTN, SBI, SBSN , SPN, SUKUK, EBA
;
--------------------------------------------------------
--  DDL for View MEMBERS_CA
--------------------------------------------------------

  CREATE OR REPLACE VIEW "MEMBERS_CA" ("CON_PERS_1", "CON_PERS_2", "CODE_ZIP", "CODE_COU", "CODE_MEM_CAT", "CODE_MRKT_RATE", "CODE_MEM_STA", "CITY_DSC", "DSC_MEM", "DSC_MEM_SHORT", "EXT_REF", "ID_MEM", "ID_MEM_XCSD", "ID_MEM_INTE", "LST_UPD_TS", "MEM_ADR_1", "MEM_ADR_2", "TYP_MEM", "MEM_CLE_ID_MEM_CAPCO", "TAX_NUM", "FAX_NBR", "PHONE_NBR", "WEB_NM", "EMAIL_ADR", "CODE_BR", "CODE_IVS", "COR_CITY_DSC", "COR_CODE_COU", "COR_CODE_ZIP", "COR_ADR_1", "COR_ADR_2") AS SELECT DISTINCT
            SUBSTR (MRG.CON1, 1, LEAST (30, LENGTH (MRG.CON1))) AS CON_PERS_1,
            SUBSTR (MRG.CON2, 1, LEAST (30, LENGTH (MRG.CON2))) AS CON_PERS_2,
            ADR.POSTALCODE AS CODE_ZIP,
            1001 AS CODE_COU,
            1 AS CODE_MEM_CAT,
            CAST (NULL AS NUMBER) AS CODE_MRKT_RATE,
            CASE WHEN ST.IDENT_ACTIVATIONTYPE = 1 THEN 1
            WHEN ST.IDENT_ACTIVATIONTYPE = 2 THEN 3
            WHEN ST.IDENT_ACTIVATIONTYPE = 4 THEN 2 END AS CODE_MEM_STA,
            ADR.CITY AS CITY_DSC,
            ST.LONGNAME AS DSC_MEM,
            ST.ENGLISHCONDENSENAME AS DSC_MEM_SHORT,
            CAST (NULL AS VARCHAR2(30)) AS EXT_REF,
            ST.CODE AS ID_MEM,
            ST.IDENT_STAKEHOLDER ID_MEM_XCSD,
            CAST (NULL AS VARCHAR2(30)) AS ID_MEM_INTE,
            GREATEST(ST.REVISION_EFFECTIVE_FROM, NVL(ST.LASTUPDATETIME,ST.REVISION_EFFECTIVE_FROM)) AS LST_UPD_TS,
            ADR.ADDRESS1 AS MEM_ADR_1,
            ADR.ADDRESS2 AS MEM_ADR_2,
            CASE WHEN PRA1.SORTVAL = 1 THEN 5 -- CSD
            WHEN PRA1.SORTVAL = 2 THEN 4 -- KSEPB AS PAYMENT BANK IN CBEST
            WHEN PRA1.SORTVAL = 3 THEN 6 -- KPEI
            WHEN PRA1.SORTVAL = 4 THEN 1 -- CLEARING MEMBER
            WHEN PRA1.SORTVAL = 5 THEN 4 -- NOSTRO ACCOUNT MEMBER, REGISTRAR
            WHEN PRA1.SORTVAL = 6 THEN 4 -- NOSTRO ACCOUNT MEMBER, PAYMENT BANK
            WHEN PRA1.SORTVAL = 7 THEN 2 -- NON CLEARING MEMBER
            ELSE 0 END AS TYP_MEM,
            CAST (NULL AS VARCHAR2(40)) AS MEM_CLE_ID_MEM_CAPCO,
            NVL(ST.MAINID, ST.TAXPAYERIDENTIFIER) AS TAX_NUM,
            SUBSTR(CONT.FAXNBR, 1, LEAST(30, LENGTH(CONT.FAXNBR))) AS FAX_NBR,
            SUBSTR(CONT.PHONENBR, 1, LEAST(30, LENGTH(CONT.PHONENBR))) AS PHONE_NBR,
            CAST (NULL AS VARCHAR2(30)) AS WEB_NM,
            CONT.EMAILADR AS EMAIL_ADR,
            CASE WHEN PSUSP.IDENT_BLOCKINGREASON = 4 THEN 1
			WHEN PSUSP.IDENT_BLOCKINGREASON = 11 THEN 2
			WHEN PSUSP.IDENT_BLOCKINGREASON = 7 THEN 3
			WHEN PSUSP.IDENT_BLOCKINGREASON = 12 THEN 4
			WHEN PSUSP.IDENT_BLOCKINGREASON = 2 THEN 1001
			WHEN PSUSP.IDENT_BLOCKINGREASON = 1 THEN 1002
			WHEN PSUSP.IDENT_BLOCKINGREASON = 8 THEN 1012
			WHEN PSUSP.IDENT_BLOCKINGREASON = 6 THEN 1007
			WHEN PSUSP.IDENT_BLOCKINGREASON = 5 THEN 1008
			WHEN PSUSP.IDENT_BLOCKINGREASON = 9 THEN 1009
			WHEN PSUSP.IDENT_BLOCKINGREASON = 10 THEN 1009 END AS CODE_BR,
            CAST (NULL AS VARCHAR2(30)) AS CODE_IVS,
            ADR2.CITY AS COR_CITY_DSC,
            CAST (NULL AS VARCHAR2(30)) AS COR_CODE_COU,
            ADR2.POSTALCODE AS COR_CODE_ZIP,
            ADR2.ADDRESS1 AS COR_ADR_1,
            ADR2.ADDRESS2 AS COR_ADR_2
            FROM PARTICIPANT ST
            LEFT JOIN
            (SELECT CP.IDENT_PARTICIPANT,
            MAX(CASE WHEN CP.NOS = 1 THEN CP.CONTACTNAME ELSE '' END) CON1,
            MAX(CASE WHEN CP.NOS = 2 THEN CP.CONTACTNAME ELSE '' END) CON2
            FROM
            (SELECT C.*, ROW_NUMBER() OVER
            (PARTITION BY IDENT_PARTICIPANT ORDER BY C.ID) NOS
            FROM CONTACTDETAILS C) CP
            GROUP BY CP.IDENT_PARTICIPANT) MRG
            ON ST.IDENT_STAKEHOLDER = MRG.IDENT_PARTICIPANT
            LEFT JOIN
            (SELECT AD.*, ROW_NUMBER() OVER (PARTITION BY AD.IDENT_PARTICIPANT, AD.IDENT_ADDRESSTYPE ORDER BY AD.IDENT_ADDRESS) RN
            FROM ADDRESS AD WHERE IDENT_ADDRESSTYPE = 1) ADR ON ST.IDENT_STAKEHOLDER = ADR.IDENT_PARTICIPANT AND RN = 1
            LEFT JOIN
            (SELECT AD.*, ROW_NUMBER()  OVER (PARTITION BY AD.IDENT_PARTICIPANT, AD.IDENT_ADDRESSTYPE ORDER BY AD.IDENT_ADDRESS) RN2
            FROM ADDRESS AD WHERE IDENT_ADDRESSTYPE = 2) ADR2 ON ST.IDENT_STAKEHOLDER = ADR2.IDENT_PARTICIPANT AND RN2 = 1
            LEFT JOIN
            (SELECT IDENT_PARTICIPANT, REGEXP_REPLACE(LISTAGG(PHONENUMBER, ';') WITHIN GROUP (ORDER BY ID), '\+62-', '0') AS PHONENBR
            , REGEXP_REPLACE(LISTAGG(FAXNUMBER, ';') WITHIN GROUP (ORDER BY ID), '\+62-', '0') AS FAXNBR, LISTAGG(EMAIL, ';') WITHIN GROUP (ORDER BY ID) AS EMAILADR
            FROM CONTACTDETAILS WHERE IDENT_PARTICIPANT IS NOT NULL  GROUP BY IDENT_PARTICIPANT
            ) CONT ON ST.IDENT_STAKEHOLDER = CONT.IDENT_PARTICIPANT
            LEFT JOIN
            (SELECT IDENT_STAKEHOLDER, MIN(CASE IDENT_CAPACITY
            WHEN 1 THEN 1 -- CSD
            WHEN 224 THEN 2 -- CENTRAL BANK
            WHEN 213 THEN 3 -- CLEARING HOUSE
            WHEN 216 THEN 4 -- KPEI MEMBER
            WHEN 214 THEN 5 -- REGISTRAR
            WHEN 209 THEN 6 -- PAYMENT BANK
            WHEN 202 THEN 7 -- ACCOUNT OPERATOR
            END) AS SORTVAL
            FROM PARTICIPANTROLEASSIGNMENT
            GROUP BY IDENT_STAKEHOLDER
            ORDER BY SORTVAL) PRA1
            ON ST.IDENT_STAKEHOLDER = PRA1.IDENT_STAKEHOLDER
            LEFT JOIN (
            SELECT P.*, ROW_NUMBER() OVER
            (PARTITION BY IDENT_SUSPENDEDPARTICIPANT ORDER BY P.ID) SUSPRANK
            FROM IDNPARTICIPANTSUSPENSION P ) PSUSP ON ST.IDENT_STAKEHOLDER = PSUSP.IDENT_SUSPENDEDPARTICIPANT
            WHERE
            ST.IDENT_MASTER IS NULL
            AND ST.IDENT_ACTIVATIONTYPE != 5
            AND (PSUSP.SUSPRANK IS NULL OR PSUSP.SUSPRANK = 1)
            UNION
            SELECT
            SUBSTR (MRG.CON1, 1, LEAST (30, LENGTH (MRG.CON1))) AS CON_PERS_1,
            SUBSTR (MRG.CON2, 1, LEAST (30, LENGTH (MRG.CON2))) AS CON_PERS_2,
            ADR.POSTALCODE AS CODE_ZIP,
            1001 AS CODE_COU,
            1 AS CODE_MEM_CAT,
            CAST (NULL AS NUMBER) AS CODE_MRKT_RATE,
            CASE WHEN ISS.IDENT_ACTIVATIONTYPE = 1 THEN 1
            WHEN ISS.IDENT_ACTIVATIONTYPE = 2 THEN 3
            WHEN ISS.IDENT_ACTIVATIONTYPE = 4 THEN 2 END AS CODE_MEM_STA,
            ADR.CITY AS CITY_DSC,
            ISS.LONGNAME AS DSC_MEM,
            CAST (NULL AS VARCHAR2(30)) AS DSC_MEM_SHORT,
            CAST (NULL AS VARCHAR2(30)) AS EXT_REF,
            ISS.CODE AS ID_MEM,
            ISS.IDENT_STAKEHOLDER ID_MEM_XCSD,
            CAST (NULL AS VARCHAR2(30)) AS ID_MEM_INTE,
            GREATEST(ISS.REVISION_EFFECTIVE_FROM, NVL(ISS.LASTUPDATETIME,ISS.REVISION_EFFECTIVE_FROM)) AS LST_UPD_TS,
            ADR.ADDRESS1 AS MEM_ADR_1,
            ADR.ADDRESS2 AS MEM_ADR_2,
            3 AS TYP_MEM, -- ISSUER
            CAST (NULL AS VARCHAR2(40)) AS MEM_CLE_ID_MEM_CAPCO,
            ISS.TAXPAYERIDENTIFIER AS TAX_NUM,
            SUBSTR(CONT.FAXNBR, 1, LEAST(30, LENGTH(CONT.FAXNBR))) AS FAX_NBR,
            SUBSTR(CONT.PHONENBR, 1, LEAST(30, LENGTH(CONT.PHONENBR))) AS PHONE_NBR,
            CAST (NULL AS VARCHAR2(30)) AS WEB_NM,
            CONT.EMAILADR AS EMAIL_ADR,
            CASE WHEN PSUSP.IDENT_BLOCKINGREASON = 4 THEN 1
			WHEN PSUSP.IDENT_BLOCKINGREASON = 11 THEN 2
			WHEN PSUSP.IDENT_BLOCKINGREASON = 7 THEN 3
			WHEN PSUSP.IDENT_BLOCKINGREASON = 12 THEN 4
			WHEN PSUSP.IDENT_BLOCKINGREASON = 2 THEN 1001
			WHEN PSUSP.IDENT_BLOCKINGREASON = 1 THEN 1002
			WHEN PSUSP.IDENT_BLOCKINGREASON = 8 THEN 1012
			WHEN PSUSP.IDENT_BLOCKINGREASON = 6 THEN 1007
			WHEN PSUSP.IDENT_BLOCKINGREASON = 5 THEN 1008
			WHEN PSUSP.IDENT_BLOCKINGREASON = 9 THEN 1009
			WHEN PSUSP.IDENT_BLOCKINGREASON = 10 THEN 1009 END AS CODE_BR,
            CAST (NULL AS VARCHAR2(30)) AS CODE_IVS,
            ADR2.CITY AS COR_CITY_DSC,
            CAST (NULL AS VARCHAR2(30)) AS COR_CODE_COU,
            ADR2.POSTALCODE AS COR_CODE_ZIP,
            ADR2.ADDRESS1 AS COR_ADR_1,
            ADR2.ADDRESS2 AS COR_ADR_2
            FROM ISSUER ISS
            LEFT JOIN
            (SELECT CP.IDENT_ISSUER,
            MAX(CASE WHEN CP.NOS = 1 THEN CP.CONTACTNAME ELSE '' END) CON1,
            MAX(CASE WHEN CP.NOS = 2 THEN CP.CONTACTNAME ELSE '' END) CON2
            FROM
            (SELECT C.*, ROW_NUMBER() OVER
            (PARTITION BY IDENT_ISSUER ORDER BY C.ID) NOS
            FROM CONTACTDETAILS C) CP
            GROUP BY CP.IDENT_ISSUER) MRG
            ON ISS.IDENT_STAKEHOLDER = MRG.IDENT_ISSUER
            LEFT JOIN
            (SELECT AD.*, ROW_NUMBER()  OVER (PARTITION BY AD.IDENT_ISSUER, AD.IDENT_ADDRESSTYPE ORDER BY AD.IDENT_ADDRESS) RN
            FROM ADDRESS AD WHERE IDENT_ADDRESSTYPE = 1) ADR ON ISS.IDENT_STAKEHOLDER = ADR.IDENT_ISSUER AND RN = 1
            LEFT JOIN
            (SELECT AD.*, ROW_NUMBER()  OVER (PARTITION BY AD.IDENT_ISSUER, AD.IDENT_ADDRESSTYPE ORDER BY AD.IDENT_ADDRESS) RN2
            FROM ADDRESS AD WHERE IDENT_ADDRESSTYPE = 2) ADR2 ON ISS.IDENT_STAKEHOLDER = ADR2.IDENT_ISSUER AND RN2 = 1
            LEFT JOIN
            (SELECT IDENT_ISSUER, REGEXP_REPLACE(LISTAGG(PHONENUMBER, ';') WITHIN GROUP (ORDER BY ID), '\+62-', '0') AS PHONENBR
            , REGEXP_REPLACE(LISTAGG(FAXNUMBER, ';') WITHIN GROUP (ORDER BY ID), '\+62-', '0') AS FAXNBR, LISTAGG(EMAIL, ';') WITHIN GROUP (ORDER BY ID) AS EMAILADR
            FROM CONTACTDETAILS WHERE IDENT_ISSUER IS NOT NULL GROUP BY IDENT_ISSUER
            ) CONT ON ISS.IDENT_STAKEHOLDER = CONT.IDENT_ISSUER
            LEFT JOIN (
            SELECT P.*, ROW_NUMBER() OVER
            (PARTITION BY IDENT_SUSPENDEDPARTICIPANT ORDER BY P.ID) SUSPRANK
            FROM IDNPARTICIPANTSUSPENSION P ) PSUSP ON ISS.IDENT_STAKEHOLDER = PSUSP.IDENT_SUSPENDEDPARTICIPANT
            WHERE
            ISS.IDENT_MASTER IS NULL
            AND ISS.IDENT_ACTIVATIONTYPE != 5
            AND (PSUSP.SUSPRANK IS NULL OR PSUSP.SUSPRANK = 1
            );

--------------------------------------------------------
--  DDL for View OTC_BOND
--------------------------------------------------------

  CREATE OR REPLACE VIEW "OTC_BOND" ("ID_OTCBOND_XCSD", "EXT_REF", "TYP_INST", "MEM_ID_MEM_XCSD", "ACCT_ID", "ACCT_ID_ACCT_CAPCO_CASH", "ACCT_ID_ACCT_COUNTERPART", "MEM_ID_MEM_XCSD_COUNTERPART", "COUNTERPART_TYPE", "INS_TYP_SEC", "INS_ID_INS_XCSD", "CURRENCY_CODE", "INST_ID_INST_XCSD", "DAT_MATURITY", "DAT_TRADE", "DAT_SETTLE", "DAT_PURCHASE", "FACE_VALUE", "PRICE_PERCENTAGE", "PRICE", "PROCEED", "INTEREST_RATE", "ACCRUED_DAYS", "ACCRUED_INTEREST", "YIELD", "HOLDING_PERIOD_TAX", "MISC_AMOUNT", "NET_PROCEEDS", "REPORT_TO_EXCHANGE", "CAPITAL_GAIN_TAX", "CODE_STA", "PARTYONHOLD", "FREE_DSC", "FLG_CAN", "FLG_MATCH", "CODE_INST_PRIO", "AGGREEMENT_CODE", "FLG_TAX", "LST_UPD_TS", "PURPOSE", "TRADE_REF", "SETTLEMENT_REASON") AS SELECT "ID_OTCBOND_XCSD","EXT_REF","TYP_INST","MEM_ID_MEM_XCSD","ACCT_ID","ACCT_ID_ACCT_CAPCO_CASH","ACCT_ID_ACCT_COUNTERPART","MEM_ID_MEM_XCSD_COUNTERPART","COUNTERPART_TYPE","INS_TYP_SEC","INS_ID_INS_XCSD","CURRENCY_CODE","INST_ID_INST_XCSD","DAT_MATURITY","DAT_TRADE","DAT_SETTLE","DAT_PURCHASE","FACE_VALUE","PRICE_PERCENTAGE","PRICE","PROCEED","INTEREST_RATE","ACCRUED_DAYS","ACCRUED_INTEREST","YIELD","HOLDING_PERIOD_TAX","MISC_AMOUNT","NET_PROCEEDS","REPORT_TO_EXCHANGE","CAPITAL_GAIN_TAX","CODE_STA","PARTYONHOLD","FREE_DSC","FLG_CAN","FLG_MATCH","CODE_INST_PRIO","AGGREEMENT_CODE","FLG_TAX","LST_UPD_TS","PURPOSE","TRADE_REF","SETTLEMENT_REASON" FROM (
            SELECT
            SI.IDENT_SETTLEMENTINSTRUCTION AS ID_OTCBOND_XCSD,
            CASE WHEN SI.INSTRUCTIONREFERENCE LIKE 'CI%' AND SI.IDENT_INSTRUMENT = 0 THEN SI.COMMONREFERENCE
            ELSE SI.INSTRUCTIONREFERENCE END AS EXT_REF,
            CASE WHEN SI.IDENT_INSTRUCTIONTYPE = 1 THEN 90 -- REALIGN
            WHEN SI.IDENT_INSTRUCTIONTYPE = 2 THEN 80 -- COLDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 3 THEN 5 -- DFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 4 THEN 25 -- DFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 5 THEN 2 -- DVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 6 THEN 23 -- DVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 7 THEN 93 -- LENDDS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 8 THEN 4 -- RFOP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 9 THEN 26 -- RFOPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 10 THEN 3 -- RVP
            WHEN SI.IDENT_INSTRUCTIONTYPE = 11 THEN 24 -- RVPBOND
            WHEN SI.IDENT_INSTRUCTIONTYPE = 12 THEN 9 -- DCONF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 13 THEN 10 -- SECTRS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 14 THEN 6 -- SECW
            WHEN SI.IDENT_INSTRUCTIONTYPE = 17 THEN 17 -- SYNC
            WHEN SI.IDENT_INSTRUCTIONTYPE = 18 THEN 12 -- BTS
            WHEN SI.IDENT_INSTRUCTIONTYPE = 19 THEN 15 -- CNF
            WHEN SI.IDENT_INSTRUCTIONTYPE = 21 THEN 11 -- WT
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'VCA/%' THEN 72 -- VCA
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            AND SI.CORPORATEACTIONREFERENCE LIKE 'RED/%' THEN 71 -- CAREM
            WHEN SI.IDENT_INSTRUCTIONTYPE IS NULL AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
            THEN 70 -- TECH
            ELSE 0 END AS TYP_INST,
            P.CODE AS MEM_ID_MEM_XCSD,
            NVL(AG.ACCOUNTIDENTIFIERVALUE, AG2.ACCOUNTIDENTIFIERVALUE) AS ACCT_ID,
            CASE WHEN SI.IDENT_ACCOUNT IS NOT NULL THEN AG2.ACCOUNTIDENTIFIERVALUE
            ELSE NULL END AS ACCT_ID_ACCT_CAPCO_CASH,
            CAST (NULL AS VARCHAR2(10)) AS ACCT_ID_ACCT_COUNTERPART,
            CASE WHEN  (CSDOFCOUNTERPARTY.CODE = 'KSEPB' OR CSDOFACCOUNTSERVICING.CODE = 'KSEPB')  THEN BICN.CODE
            ELSE P2.CODE END AS MEM_ID_MEM_XCSD_COUNTERPART,
            CASE WHEN  (CSDOFCOUNTERPARTY.CODE = 'KSEPB' OR CSDOFACCOUNTSERVICING.CODE = 'KSEPB') THEN 2
            ELSE 1 END AS COUNTERPART_TYPE,
            1 AS INS_TYP_SEC,
            INS.NAME AS INS_ID_INS_XCSD,
            CU.CODE AS CURRENCY_CODE,
            SIM.IDENT_SETTLEMENTINSTRUCTION AS INST_ID_INST_XCSD,
            INS.MATURITYDATE AS DAT_MATURITY,
            SI.TRADEDATE AS DAT_TRADE,
            SI.SETTLEMENTDATE AS DAT_SETTLE,
            CAST(NULL AS DATE) AS DAT_PURCHASE,
            SI.VOLUME AS FACE_VALUE,
            SI.TRADEPRICE PRICE_PERCENTAGE,
            0 AS PRICE,
            NVL(SI.AMOUNT,0) AS PROCEED,
            NVL(DE.INTERESTRATE,0) INTEREST_RATE,
            NVL(DE.NUMBEROFDAYSACCRUED,0) ACCRUED_DAYS,
            NVL(SI.ACCRUEDINTERESTAMOUNT,0) ACCRUED_INTEREST,
            NVL(DE.YIELD,0) YIELD,
            NVL(DE.WITHHOLDINGTAX,0) AS HOLDING_PERIOD_TAX,
            0 AS MISC_AMOUNT,
            NVL(SI.AMOUNT,0) AS NET_PROCEEDS,
            1 AS REPORT_TO_EXCHANGE,
            NVL(DE.TRANSACTIONTAX,0) AS CAPITAL_GAIN_TAX,
            CASE WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'
            AND (SI.IDENT_INSTRUCTIONTYPE NOT IN (12,14) OR SI.IDENT_INSTRUCTIONTYPE IS NULL) THEN 116 -- SETTLED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 12 THEN 104 -- DEPOSITED
            WHEN SI.INSTRUCTIONSTATUS = 'SETTLED'  AND SI.IDENT_INSTRUCTIONTYPE = 14 THEN 114 -- WITHDRAWN
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED'  AND SI.IDENT_INSTRUCTIONSTATUSREASON = 43 THEN 149 -- DROPPED
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONSTATUSREASON = 35 THEN 107 -- OVERDUE
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' THEN 112 -- CANCELLED
            WHEN SI.INSTRUCTIONSTATUS = 'PENDING' AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (1,2,9,10)  THEN 108 -- FAILED (LACK OF BALANCES)
            WHEN SI.INSTRUCTIONSTATUS = 'ACCEPTED' AND SI.IDENT_INSTRUCTIONSTATUSREASON = 40
            AND (CSDOFCOUNTERPARTY.CODE = 'KSEPB' OR CSDOFACCOUNTSERVICING.CODE = 'KSEPB') THEN 147 -- 'WAITING FOR BI CONFIRMATION'
            WHEN SI.INSTRUCTIONSTATUS NOT IN ('ACCEPTED',  'SETTLED', 'CANCELLED', 'FAILED') AND SI.SETTLEMENTPATTERN = 8
            AND (CSDOFCOUNTERPARTY.CODE = 'KSEPB' OR CSDOFACCOUNTSERVICING.CODE = 'KSEPB') THEN 147 -- 'WAITING FOR BI CONFIRMATION'
            WHEN  SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED') AND SI.PARTYONHOLD = 1 AND SI.IDENT_MATCHINGSTATUS = 2  THEN 101 -- MATCHED PENDING APPROVE
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED') AND SI.PARTYONHOLD = 0 AND SI.IDENT_MATCHINGSTATUS = 2  THEN 101 -- 'MATCHED'
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED') AND SI.IDENT_MATCHINGSTATUS IN (0,1) AND SI.PARTYONHOLD = 1 THEN 101 -- PENDING APPROVE
            WHEN SI.INSTRUCTIONSTATUS = 'ACCEPTED' AND (SI.IDENT_MATCHINGSTATUS IN (0, 1)
            OR SI.IDENT_MATCHINGSTATUS IS NULL) THEN 121 -- UNMATCHED
            WHEN SI.INSTRUCTIONSTATUS IN ('ACCEPTED', 'MATCHED') AND SI.PARTYONHOLD = 0 AND (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)) < SI.SETTLEMENTDATE THEN 102 -- READY FOR POSITIONING (SETT DATE IN THE FUTURE)
            WHEN SI.INSTRUCTIONSTATUS IN ('PENDING', 'ACCEPTED', 'MATCHED')  AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (14,16) THEN 101 -- VALIDATED
            ELSE 0 END AS CODE_STA,
			SI.PARTYONHOLD,
            DE.DESCRIPTION AS FREE_DSC,
            CASE WHEN SI.IDENT_CANCELLATIONSTATUS = 2 THEN 1
            ELSE 0 END AS FLG_CAN,
            CASE WHEN SI.IDENT_MATCHINGSTATUS IN (0,1) THEN 0
            ELSE 1 END AS FLG_MATCH,
            2 AS CODE_INST_PRIO,
            SI.COMMONREFERENCE AGGREEMENT_CODE,
            0 AS FLG_TAX,
            NVL(SI.EFFECTIVESETTLEMENTDATE,SI.SYSMODIFIED) AS LST_UPD_TS,
            CASE WHEN SI.TRADEREFERENCE IS NOT NULL THEN 1
            ELSE 2 END AS PURPOSE,
            SI.TRADEREFERENCE AS TRADE_REF,
            CASE WHEN SI.IDENT_TRANSACTIONTYPE = 52 THEN 1004 -- BART
            WHEN SI.IDENT_TRANSACTIONTYPE IN (26, 27) THEN 1013 -- COLL
            WHEN SI.IDENT_TRANSACTIONTYPE = 28 THEN 1023 -- CONV
            WHEN SI.IDENT_TRANSACTIONTYPE = 53 THEN 1008 -- GIFT
            WHEN SI.IDENT_TRANSACTIONTYPE = 50 THEN 1002 -- GRAN
            WHEN SI.IDENT_TRANSACTIONTYPE = 51 THEN 1003 -- HERI
            WHEN SI.IDENT_TRANSACTIONTYPE = 4 THEN 1021 -- IPO
            WHEN SI.IDENT_TRANSACTIONTYPE = 55 THEN 1020 -- MSOP
            WHEN SI.IDENT_TRANSACTIONTYPE = 56 THEN 1010 -- OTHR
            WHEN SI.IDENT_TRANSACTIONTYPE IN (8,2) THEN 1016 -- OWNE
            WHEN SI.IDENT_TRANSACTIONTYPE = 5 THEN 1006 -- REDM
            WHEN SI.IDENT_TRANSACTIONTYPE IN (12,13) THEN 1022 -- REPO
            WHEN SI.IDENT_TRANSACTIONTYPE IN (40, 41) THEN 1007 -- SELB
            WHEN SI.IDENT_TRANSACTIONTYPE = 14 THEN 1005 -- SUBS
            WHEN SI.IDENT_TRANSACTIONTYPE = 1 THEN 1001 -- TRAD
            WHEN SI.IDENT_TRANSACTIONTYPE = 54 THEN 1009 -- VERD
            END AS SETTLEMENT_REASON
            FROM SETTLEMENTINSTRUCTION SI
            LEFT JOIN PARTICIPANT CSDOFCOUNTERPARTY ON SI.IDENT_CSDOFCOUNTERPARTY = CSDOFCOUNTERPARTY.IDENT_STAKEHOLDER
            LEFT JOIN PARTICIPANT CSDOFACCOUNTSERVICING ON SI.IDENT_CSDOFACCOUNTSERVICING = CSDOFACCOUNTSERVICING.IDENT_STAKEHOLDER
            LEFT JOIN PARTICIPANT P ON  SI.IDENT_ACCOUNTSERVICING = P.IDENT_STAKEHOLDER
            LEFT JOIN CURRENCY CU ON SI.IDENT_CURRENCY = CU.IDENT_CURRENCY
            LEFT JOIN SETTLEMENTINSTRUCTIONDETAILS DE ON SI.IDENT_SETTLEMENTINSTRUCTION = DE.IDENT_SETTLEMENTINSTRUCTION
            LEFT JOIN SECURITIESACCOUNT SA ON SI.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG ON SA.IDENT_ACCOUNTCOMPOSITE = AG.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA ON SI.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AG2 ON CA.IDENT_ACCOUNTCOMPOSITE = AG2.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN (
            SELECT SIM.*
            FROM SETTLEMENTINSTRUCTION SIM WHERE SIM.MATCHINGREFERENCE != 0
            ) SIM ON SI.MATCHINGREFERENCE = SIM.MATCHINGREFERENCE
            LEFT JOIN PARTICIPANT P2 ON SI.IDENT_COUNTERPART = P2.IDENT_STAKEHOLDER
			LEFT JOIN BICOUNTERPARTY BICN ON SI.COUNTERPARTBIC = BICN.BICCODE
            LEFT JOIN INSTRUMENT INS ON SI.IDENT_INSTRUMENT = INS.IDENT_INSTRUMENT
            LEFT JOIN INSTRUCTIONTYPE INSTYPE ON SI.IDENT_INSTRUCTIONTYPE = INSTYPE.IDENT_INSTRUCTIONTYPE
            WHERE INSTYPE.CODE IN (
            'DFOPBOND', 'DVPBOND', 'RFOPBOND', 'RVPBOND'
            )
            AND (
            SI.MATCHINGREFERENCE = 0 OR
            SI.IDENT_SETTLEMENTINSTRUCTION != SIM.IDENT_SETTLEMENTINSTRUCTION
            )
            AND INS.IDENT_MASTER IS NULL
            AND AG.IDENT_MASTER IS NULL
            AND AG2.IDENT_MASTER IS NULL
            )
            WHERE TRUNC(LST_UPD_TS) = (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE));
--------------------------------------------------------
--  DDL for View POSITION_MOVEMENTS
--------------------------------------------------------

  CREATE OR REPLACE VIEW "POSITION_MOVEMENTS" ("AMT_OPER", "CODE_ACT_STA", "DAT_EXEC", "ID_ACT_CAPCO", "LST_UPD_TS", "TYP_MVT", "BLNC_ID_BLNC_CAPCO", "INST_ID_INST_XCSD", "SOA_ID_SOA_CAPCO", "EXT_REF", "ID_ACCT_XCSD", "INSTRUMENT", "TYP_BLNC") AS SELECT "AMT_OPER","CODE_ACT_STA","DAT_EXEC","ID_ACT_CAPCO","LST_UPD_TS","TYP_MVT","BLNC_ID_BLNC_CAPCO","INST_ID_INST_XCSD","SOA_ID_SOA_CAPCO","EXT_REF","ID_ACCT_XCSD","INSTRUMENT","TYP_BLNC" FROM (
            SELECT AMT_OPER,
            CASE WHEN INSTRUCTIONSTATUS = 'SETTLED' THEN 1
            WHEN IDENT_INSTRUCTIONSTATUSREASON IN (1,2) THEN 2
            WHEN IDENT_INSTRUCTIONSTATUSREASON IN (9,10) THEN 3
            ELSE 6 END AS CODE_ACT_STA,
            DAT_EXEC, ROWNUM ID_ACT_CAPCO, LST_UPD_TS, TYP_MVT,
            BLNC_ID_BLNC_CAPCO,  INST_ID_INST_XCSD, CAST (NULL AS VARCHAR2(40)) AS SOA_ID_SOA_CAPCO,
            EXT_REF, ID_ACCT_XCSD, SECURITY AS INSTRUMENT, TYP_BLNC
            FROM (
            (SELECT SI.VOLUME AS AMT_OPER, 1 AS CODE_ACT_STA, NVL(SI.EFFECTIVESETTLEMENTDATE,SI.UPDATEDATE) AS DAT_EXEC,
            NULL AS ID_ACT_CAPCO, NVL(SI.EFFECTIVESETTLEMENTDATE,SI.UPDATEDATE) AS LST_UPD_TS,
            SI.IDENT_SECURITIESMOVEMENT AS TYP_MVT, CAST (NULL AS VARCHAR2(40)) AS BLNC_ID_BLNC_CAPCO,
            SI.IDENT_SETTLEMENTINSTRUCTION AS INST_ID_INST_XCSD,
            CASE WHEN SI.INSTRUCTIONREFERENCE LIKE 'CI%' AND SI.IDENT_INSTRUMENT = 0 THEN SI.COMMONREFERENCE
            ELSE SI.INSTRUCTIONREFERENCE END AS EXT_REF,
            AC.ACCOUNTIDENTIFIERVALUE ID_ACCT_XCSD, INSTR.NAME AS SECURITY, 1 AS TYP_BLNC, SI.INSTRUCTIONSTATUS, SI.IDENT_INSTRUCTIONSTATUSREASON
            FROM SETTLEMENTINSTRUCTION SI, ACCOUNTCOMPOSITE AC, INSTRUMENT INSTR, SECURITIESACCOUNT SA, SETTLEMENTINSTRUCTIONDETAILS DE
            WHERE SI.INSTRUCTIONSTATUS IN ( 'PENDING', 'MATCHED', 'SETTLED')
            AND SI.PARTYONHOLD = 0
            AND SI.IDENT_SETTLEMENTINSTRUCTION = DE.IDENT_SETTLEMENTINSTRUCTION(+)
            AND SA.IDENT_ACCOUNTCOMPOSITE = AC.IDENT_ACCOUNTCOMPOSITE
            AND SI.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            AND SI.IDENT_INSTRUMENT = INSTR.IDENT_INSTRUMENT
            AND SI.IDENT_SECURITIESMOVEMENT != 3
            AND SI.VOLUME > 0
            AND NVL(TRUNC(SI.EFFECTIVESETTLEMENTDATE),TRUNC(SI.SYSMODIFIED)) = (
				SELECT OPERATINGDATE FROM OPERATINGDATE
                WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)
				)
            )
            UNION
            (SELECT SI.AMOUNT AS AMT_OPER, 1 AS CODE_ACT_STA, NVL(SI.EFFECTIVESETTLEMENTDATE,SI.UPDATEDATE) AS DAT_EXEC,
            NULL AS ID_ACT_CAPCO , NVL(SI.EFFECTIVESETTLEMENTDATE,SI.UPDATEDATE) AS LST_UPD_TS,
            SI.IDENT_PAYMENTDIRECTION AS TYP_MVT, CAST (NULL AS VARCHAR2(40)) AS BLNC_ID_BLNC_CAPCO,
            SI.IDENT_SETTLEMENTINSTRUCTION AS INST_ID_INST_XCSD,
            CASE WHEN SI.INSTRUCTIONREFERENCE LIKE 'CI%' AND SI.IDENT_INSTRUMENT = 0 THEN SI.COMMONREFERENCE
            ELSE SI.INSTRUCTIONREFERENCE END AS EXT_REF,
            AC.ACCOUNTIDENTIFIERVALUE ID_ACCT_XCSD, CURR.CODE AS SECURITY, 1 AS TYP_BLNC, SI.INSTRUCTIONSTATUS, SI.IDENT_INSTRUCTIONSTATUSREASON
            FROM SETTLEMENTINSTRUCTION SI, ACCOUNTCOMPOSITE AC, CURRENCY CURR, CASHACCOUNT CA, SETTLEMENTINSTRUCTIONDETAILS DE
            WHERE SI.INSTRUCTIONSTATUS IN ( 'PENDING', 'MATCHED', 'SETTLED')
            AND SI.PARTYONHOLD = 0
            AND SI.IDENT_SETTLEMENTINSTRUCTION = DE.IDENT_SETTLEMENTINSTRUCTION(+)
            AND SI.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            AND AC.IDENT_ACCOUNTCOMPOSITE = CA.IDENT_ACCOUNTCOMPOSITE
            AND SI.IDENT_CURRENCY = CURR.IDENT_CURRENCY
            AND SI.IDENT_CFPMETHOD != 2
            AND SI.AMOUNT > 0
            AND NVL(TRUNC(SI.EFFECTIVESETTLEMENTDATE),TRUNC(SI.SYSMODIFIED)) = (
				SELECT OPERATINGDATE FROM OPERATINGDATE
                WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)
				)
            )
            )
            ORDER BY LST_UPD_TS ASC
            )
            ORDER BY ID_ACT_CAPCO;
--------------------------------------------------------
--  DDL for View SECURITIES_CA
--------------------------------------------------------

  CREATE OR REPLACE VIEW "SECURITIES_CA" ("ID_INS_XCSD", "LOCAL_CODE", "LST_UPD_TS", "CODE_STA", "AMT_MIN_TRADE", "CODE_BASE_SEC", "CODE_PHYS", "CODE_REG", "CODE_SEC_RATE", "DATE_ACTI", "DAT_MAT", "EXT_REF", "SEC_DENM", "SEC_DSC", "SEC_NUM", "TYP_SEC", "AMT_ISSUED", "CODE_ACTI_SEC", "CASEC_ID_CASEC_XCSD", "CODE_CURR", "CODE_BR", "ID_REGISTRAR_XCSD", "ID_ISSUER_XCSD") AS SELECT
            INSTR.IDENT_INSTRUMENT AS ID_INS_XCSD,
            INSTR.NAME AS LOCAL_CODE,
            INSTR.LASTUPDATETIME AS LST_UPD_TS,
            CASE WHEN INSTR.IDENT_ACTIVATIONTYPE = 1 THEN 1
            WHEN INSTR.IDENT_ACTIVATIONTYPE = 4 THEN 2
            WHEN INSTR.IDENT_ACTIVATIONTYPE = 2 THEN 3 END AS CODE_STA,
            INSTR.MINIMUMSETTLEMENTQUANTITY AS AMT_MIN_TRADE,
            INSTR.NAME AS CODE_BASE_SEC,
            CASE WHEN INSTR.IDENT_INSTRUMENTFORM = 2 THEN 4
            WHEN INSTR.IDENT_INSTRUMENTFORM = 3 THEN 1
            WHEN INSTR.IDENT_INSTRUMENTFORM = 1 THEN 0
            END AS CODE_PHYS,
            CASE WHEN INSTR.ISBEARER = 1 THEN 1
            ELSE 2 END AS CODE_REG,
            CAST(NULL AS NUMBER) AS CODE_SEC_RATE,
            INSTR.REGISTRATIONDATE AS DATE_ACTI,
            INSTR.MATURITYDATE AS DAT_MAT,
            CAST(NULL AS VARCHAR(10)) AS EXT_REF,
            INSTR.SETTLEMENTLOT AS SEC_DENM,
            SUBSTR(INSTR.LONGNAME, 1, LEAST(50, LENGTH(INSTR.LONGNAME))) AS SEC_DSC,
            CASE WHEN AC.IDENT_ASSETCLASSTYPE != 5 THEN INSTR.TOTALALLOWEDQUANTITY
            ELSE CAST (NULL AS NUMBER) END AS SEC_NUM,
            CASE WHEN INSTR.IDENT_ASSETCLASS IN (1001, 1029, 1030) THEN 2
            WHEN INSTR.IDENT_ASSETCLASS IN (1002, 1028) THEN 1
            WHEN INSTR.IDENT_ASSETCLASS = 1003 THEN 14
            WHEN INSTR.IDENT_ASSETCLASS IN (1004, 1031) THEN 7
            WHEN INSTR.IDENT_ASSETCLASS = 1005 THEN 4
            WHEN INSTR.IDENT_ASSETCLASS = 1006 THEN 5
            WHEN INSTR.IDENT_ASSETCLASS IN (1007, 1027) THEN 16
            WHEN INSTR.IDENT_ASSETCLASS IN (1008, 1017) THEN 3
            WHEN INSTR.IDENT_ASSETCLASS IN (1009, 1018, 1019) THEN 13
            WHEN INSTR.IDENT_ASSETCLASS = 1010 THEN 11
            WHEN INSTR.IDENT_ASSETCLASS = 1011 THEN 17
            WHEN INSTR.IDENT_ASSETCLASS = 1012 THEN 8
            WHEN INSTR.IDENT_ASSETCLASS = 1013 THEN 18
            WHEN INSTR.IDENT_ASSETCLASS = 1014 THEN 9
            WHEN INSTR.IDENT_ASSETCLASS IN (1015,1032) THEN 19
            WHEN INSTR.IDENT_ASSETCLASS = 1016 THEN 15
			WHEN INSTR.IDENT_ASSETCLASS = 1033 THEN 20
            ELSE 0 END AS TYP_SEC,
            CASE WHEN AC.IDENT_ASSETCLASSTYPE = 5 THEN INSTR.TOTALALLOWEDQUANTITY
            ELSE INSTR.ISSUEDQUANTITY END AS AMT_ISSUED,
            CAST (NULL AS NUMBER) AS CODE_ACTI_SEC,
            INSTR.IDENT_INSTRUMENT AS CASEC_ID_CASEC_XCSD,
            CU.CODE AS CODE_CURR,
            CASE WHEN SUSP.IDENT_BLOCKINGREASON = 4 THEN 1
			WHEN SUSP.IDENT_BLOCKINGREASON = 11 THEN 2
			WHEN SUSP.IDENT_BLOCKINGREASON = 7 THEN 3
			WHEN SUSP.IDENT_BLOCKINGREASON = 12 THEN 4
			WHEN SUSP.IDENT_BLOCKINGREASON = 2 THEN 1001
			WHEN SUSP.IDENT_BLOCKINGREASON = 1 THEN 1002
			WHEN SUSP.IDENT_BLOCKINGREASON = 8 THEN 1012
			WHEN SUSP.IDENT_BLOCKINGREASON = 6 THEN 1007
			WHEN SUSP.IDENT_BLOCKINGREASON = 5 THEN 1008
			WHEN SUSP.IDENT_BLOCKINGREASON = 9 THEN 1009
			WHEN SUSP.IDENT_BLOCKINGREASON = 10 THEN 1009
			END AS CODE_BR,
            INSTR.IDENT_ISSUERCSD AS ID_REGISTRAR_XCSD,
            INSTR.IDENT_ISSUER AS ID_ISSUER_XCSD
            FROM INSTRUMENT INSTR
            LEFT JOIN ASSETCLASS AC ON INSTR.IDENT_ASSETCLASS = AC.IDENT_ASSETCLASS LEFT JOIN ASSETCLASSTYPE ACT ON AC.IDENT_ASSETCLASSTYPE = ACT.IDENT_ASSETCLASSTYPE
            LEFT JOIN CURRENCY CU ON CU.IDENT_CURRENCY = INSTR.IDENT_CURRENCY
            LEFT JOIN (
            SELECT SUSP.*, ROW_NUMBER() OVER (PARTITION BY IDENT_INSTRUMENTEXT ORDER BY IDENT ASC) AS SUSPROW FROM INSTRUMENTSUSPENSION SUSP ) SUSP
            ON SUSP.IDENT_INSTRUMENTEXT = INSTR.IDENT_INSTRUMENT AND SUSPROW = 1
            WHERE INSTR.IDENT_MASTER IS NULL
            AND ACT.IDENT_ASSETCLASSTYPE != 10 AND INSTR.NAME IS NOT NULL AND INSTR.NAME != 'IDR';
--------------------------------------------------------
--  DDL for View SNAPSHOT_BALANCES
--------------------------------------------------------

  CREATE OR REPLACE VIEW "SNAPSHOT_BALANCES" ("ID_SEQ_XCSD", "ID_BLNC_XCSD", "LST_UPD_TS", "SNAP_DAT", "AMT_BLNC", "TYP_BLNC", "TYP_FLG_ACCT", "ACCOUNT_ID", "SEC_NAME") AS SELECT ROWNUM AS ID_SEQ_XCSD, ID_BLNC_XCSD, LST_UPD_TS,
            (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)) AS SNAP_DAT,
            AMT_BLNC, TYP_BLNC, TYP_FLG_ACCT, ACCOUNT_ID, SEC_NAME
            FROM (
            (SELECT AH.IDENT_ACCOUNTHOLDING AS ID_BLNC_XCSD, AH.VALIDFROM AS LST_UPD_TS, ABS(AH.SETTLEDQUANTITY-AH.RESTRICTEDQUANTITY) AS AMT_BLNC,
            CASE WHEN SA.IDENT_ACCOUNTTYPE NOT IN (1002,1010,1013) THEN 1
            ELSE 9 END AS TYP_BLNC,
            CASE WHEN SA.IDENT_ACCOUNTTYPE = 84 THEN 2
            WHEN SA.IDENT_ACCOUNTTYPE = 1 THEN 2
            ELSE 1 END AS TYP_FLG_ACCT,
            AC.ACCOUNTIDENTIFIERVALUE AS ACCOUNT_ID,
            (SELECT NAME FROM INSTRUMENT INSTR WHERE INSTR.IDENT_INSTRUMENT = AH.IDENT_INSTRUMENT) AS SEC_NAME
            FROM ACCOUNTHOLDING AH, SECURITIESACCOUNT SA, ACCOUNTCOMPOSITE AC
            WHERE
            AH.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            AND SA.IDENT_ACCOUNTCOMPOSITE = AC.IDENT_ACCOUNTCOMPOSITE
            -- AND ABS(AH.SETTLEDQUANTITY) > 0
            AND AH.VALIDUNTIL IS NULL)
            UNION
            (SELECT AH.IDENT_ACCOUNTHOLDING AS ID_BLNC_XCSD, AH.VALIDFROM AS LST_UPD_TS, ABS(AH.RESTRICTEDQUANTITY) AS AMT_BLNC,
            CASE WHEN SA.IDENT_ACCOUNTTYPE NOT IN (1002,1010,1013) THEN 2
            ELSE 9 END AS TYP_BLNC,
            CASE WHEN SA.IDENT_ACCOUNTTYPE = 84 THEN 2
            WHEN SA.IDENT_ACCOUNTTYPE = 1 THEN 2
            ELSE 1 END AS TYP_FLG_ACCT,
            AC.ACCOUNTIDENTIFIERVALUE AS ACCOUNT_ID,
            (SELECT NAME FROM INSTRUMENT INSTR WHERE INSTR.IDENT_INSTRUMENT = AH.IDENT_INSTRUMENT) AS SEC_NAME
            FROM ACCOUNTHOLDING AH, SECURITIESACCOUNT SA, ACCOUNTCOMPOSITE AC
            WHERE
            AH.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            AND SA.IDENT_ACCOUNTCOMPOSITE = AC.IDENT_ACCOUNTCOMPOSITE
            -- AND ABS(AH.RESTRICTEDQUANTITY) > 0
            AND AH.VALIDUNTIL IS NULL)
            UNION
            (SELECT CAB.IDENT_CASHACCOUNTBALANCE AS ID_BLNC_CAPCO, CAB.VALIDFROM AS LST_UPD_TS, ABS(CAB.BALANCE-CAB.RESTRICTEDBALANCE) AS AMT_BLNC,
            1 AS TYP_BLNC,
            CASE WHEN CA.IDENT_ACCOUNTTYPE = 1 THEN 2
            ELSE 1 END AS TYP_FLG_ACCT,
            AC.ACCOUNTIDENTIFIERVALUE AS ACCOUNT_ID,
            (SELECT CODE FROM CURRENCY CU WHERE CAB.IDENT_CURRENCY = CU.IDENT_CURRENCY) AS SEC_NAME
            FROM CASHACCOUNTBALANCE CAB, ACCOUNTCOMPOSITE AC, CASHACCOUNT CA
            WHERE CA.IDENT_ACCOUNTCOMPOSITE = AC.IDENT_ACCOUNTCOMPOSITE
            AND CAB.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            -- AND ABS(CAB.BALANCE) > 0
            AND CAB.VALIDUNTIL IS NULL)
            UNION
            (SELECT CAB.IDENT_CASHACCOUNTBALANCE AS ID_BLNC_CAPCO, CAB.VALIDFROM AS LST_UPD_TS, ABS(RESTRICTEDBALANCE) AS AMT_BLNC,
            2 AS TYP_BLNC,
            CASE WHEN CA.IDENT_ACCOUNTTYPE = 1 THEN 2
            ELSE 1 END AS TYP_FLG_ACCT,
            AC.ACCOUNTIDENTIFIERVALUE AS ACCOUNT_ID,
            (SELECT CODE FROM CURRENCY CU WHERE CAB.IDENT_CURRENCY = CU.IDENT_CURRENCY) AS SEC_NAME
            FROM CASHACCOUNTBALANCE CAB, ACCOUNTCOMPOSITE AC, CASHACCOUNT CA
            WHERE CA.IDENT_ACCOUNTCOMPOSITE = AC.IDENT_ACCOUNTCOMPOSITE
            AND CAB.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            -- AND ABS(CAB.RESTRICTEDBALANCE) > 0
            AND CAB.VALIDUNTIL IS NULL)
            );

--------------------------------------------------------
--  DDL for View TECH_INSTRUCTIONS
--------------------------------------------------------

  CREATE OR REPLACE VIEW "TECH_INSTRUCTIONS" ("CODE_STA", "DAT_SETTLE", "ID_INST_CAPCO", "LST_UPD_TS", "TYP_INST", "CODE_INST_PRIO", "TYP_CA", "CA_ID_CA_CAPCO", "MEM_ID_MEM_CAPCO", "MEM_ID_MEM_CAPCO_COUNTERPART", "INS_ID_INS_CAPCO", "CUR_ID_INS_CAPCO", "ACCT_ID_ACCT_CAPCO", "EXT_REF", "DSC_FREE", "QTY_ASS_OPT", "QTY_OPT", "OPT_ID_OPT_CAPCO", "DSC_PROC_REQ", "CREATION_TS", "EXE_POS_TS") AS SELECT DISTINCT
            CASE WHEN SI.INSTRUCTIONSTATUS = 'SETTLED' THEN 116
            WHEN SI.INSTRUCTIONSTATUS = 'PENDING' AND SI.IDENT_INSTRUCTIONSTATUSREASON IN (1,2,9,10,36) THEN 108
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED'  AND SI.IDENT_INSTRUCTIONSTATUSREASON = 43 THEN 149 -- DROPPED
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' AND SI.IDENT_INSTRUCTIONSTATUSREASON = 35 THEN 107 -- OVERDUE
            WHEN SI.INSTRUCTIONSTATUS = 'CANCELLED' THEN 112 -- CANCELLED
            WHEN (SELECT OPERATINGDATE FROM OPERATINGDATE WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)) <= SI.SETTLEMENTDATE THEN 102 -- READY FOR POSITIONING
            ELSE 102 END AS CODE_STA -- READY FOR POSITIONING
            , SI.SETTLEMENTDATE AS DAT_SETTLE
            , SI.INSTRUCTIONREFERENCE AS ID_INST_CAPCO
            , NVL(SI.EFFECTIVESETTLEMENTDATE, SI.UPDATEDATE) AS LST_UPD_TS
            , CASE WHEN SI.CORPORATEACTIONREFERENCE LIKE 'VCA/%' OR SID.DESCRIPTION LIKE 'VCA/%' THEN 72 -- VCA
            WHEN SI.CORPORATEACTIONREFERENCE LIKE 'RED/%' THEN 71 -- CAREM
            ELSE 70 END AS TYP_INST -- TECH
            , 2 AS CODE_INST_PRIO
            , CAST(NULL AS NUMBER) AS TYP_CA
            , NVL(SI.CORPORATEACTIONREFERENCE, SUBSTR(SID.DESCRIPTION, 0, INSTR(SID.DESCRIPTION, '///')-1)) AS CA_ID_CA_CAPCO
            , P.CODE AS MEM_ID_MEM_CAPCO
            , CP.CODE AS MEM_ID_MEM_CAPCO_COUNTERPART
            , INS.NAME AS INS_ID_INS_CAPCO
            , CU.CODE AS CUR_ID_INS_CAPCO
            , AC.ACCOUNTIDENTIFIERVALUE AS ACCT_ID_ACCT_CAPCO
            , CASE WHEN  SI.CORPORATEACTIONREFERENCE LIKE 'VCA/%' THEN SI.POOLIDENTIFIER -- VCA
			WHEN SI.CORPORATEACTIONREFERENCE IS NULL THEN SUBSTR(SID.DESCRIPTION, INSTR(SID.DESCRIPTION, '///')+3)
			ELSE CAST (NULL AS VARCHAR(20)) END AS EXT_REF
            , CAST(NULL AS VARCHAR2(20)) AS DSC_FREE
            , CAST(NULL AS VARCHAR2(20)) AS QTY_ASS_OPT
            , CAST(NULL AS VARCHAR2(20)) AS QTY_OPT
            , CAST(NULL AS VARCHAR2(20)) AS OPT_ID_OPT_CAPCO
            , CAST(NULL AS VARCHAR2(20)) AS DSC_PROC_REQ
            , SI.CREATEDATE AS CREATION_TS
            , SI.EFFECTIVESETTLEMENTDATE AS EXE_POS_TS
            FROM SETTLEMENTINSTRUCTION SI
			LEFT JOIN SETTLEMENTINSTRUCTIONDETAILS SID ON SI.IDENT_SETTLEMENTINSTRUCTION = SID.IDENT_SETTLEMENTINSTRUCTION
            LEFT JOIN SECURITIESACCOUNT SA ON SI.IDENT_ACCOUNT = SA.IDENT_ACCOUNT
            LEFT JOIN ACCOUNTCOMPOSITE AC ON SA.IDENT_ACCOUNTCOMPOSITE = AC.IDENT_ACCOUNTCOMPOSITE
            LEFT JOIN CASHACCOUNT CA ON SI.IDENT_CASHACCOUNT = CA.IDENT_ACCOUNT
            LEFT JOIN INSTRUMENT INS ON SI.IDENT_INSTRUMENT = INS.IDENT_INSTRUMENT
            LEFT JOIN CURRENCY CU ON SI.IDENT_CURRENCY = CU.IDENT_CURRENCY
            LEFT JOIN PARTICIPANT P ON SI.IDENT_ACCOUNTSERVICING = P.IDENT_STAKEHOLDER
            LEFT JOIN PARTICIPANT CP ON SI.IDENT_COUNTERPART = CP.IDENT_STAKEHOLDER
            WHERE (SI.CORPORATEACTIONREFERENCE IS NOT NULL OR SID.DESCRIPTION LIKE 'VCA/%')
            AND SI.IDENT_TRANSACTIONTYPE = 3 -- CORP
			AND (SI.IDENT_PAYMENTDIRECTION = 1 OR SI.IDENT_SECURITIESMOVEMENT = 1)
			AND NVL(TRUNC(SI.EFFECTIVESETTLEMENTDATE), TRUNC(SI.SYSMODIFIED)) = (
				SELECT OPERATINGDATE FROM OPERATINGDATE
                WHERE IDENT_OPERATINGDATE = (SELECT MAX(IDENT_OPERATINGDATE) FROM OPERATINGDATE)
				);
--------------------------------------------------------
--  DDL for View WARRANTS_CA
--------------------------------------------------------

  CREATE OR REPLACE VIEW "WARRANTS_CA" ("ID_INS_XCSD", "LOCAL_CODE", "LST_UPD_TS", "CODE_STA", "AMT_MIN_TRADE", "CODE_BASE_SEC", "CODE_PHYS", "CODE_REG", "CODE_SEC_RATE", "DATE_ACTI", "DAT_MAT", "EXT_REF", "SEC_DENM", "SEC_DSC", "SEC_NUM", "TYP_SEC", "EXE_PRI", "TYP_EXE", "TYP_OPT", "WAR_RATIO", "INS_ID_INS_XCSD", "CASEC_ID_CASEC_XCSD", "CODE_CURR", "CODE_BR", "ID_REGISTRAR_XCSD", "ID_ISSUER_XCSD") AS SELECT ID_INS_XCSD, LOCAL_CODE, LST_UPD_TS, CODE_STA, AMT_MIN_TRADE, CODE_BASE_SEC, CODE_PHYS, CODE_REG, CODE_SEC_RATE, DATE_ACTI, DAT_MAT, EXT_REF, SEC_DENM, SEC_DSC,
            SEC_NUM, TYP_SEC, EXE_PRI, TYP_EXE, TYP_OPT, WAR_RATIO, INS_ID_INS_XCSD, CASEC_ID_CASEC_XCSD, CODE_CURR, CODE_BR, ID_REGISTRAR_XCSD, ID_ISSUER_XCSD
            FROM (
            SELECT INSTR.IDENT_INSTRUMENT AS ID_INS_XCSD,
            INSTR.NAME AS LOCAL_CODE,
            INSTR.LASTUPDATETIME AS LST_UPD_TS,
            CASE
            WHEN INSTR.IDENT_ACTIVATIONTYPE = 1 THEN 1
            WHEN INSTR.IDENT_ACTIVATIONTYPE = 4 THEN 2
            WHEN INSTR.IDENT_ACTIVATIONTYPE = 2 THEN 3
            END
            AS CODE_STA,
            INSTR.MINIMUMSETTLEMENTQUANTITY AS AMT_MIN_TRADE,
            SUBSTR(INSTR.NAME,1,LEAST(20, LENGTH(INSTR.NAME))) AS CODE_BASE_SEC,
            CASE
            WHEN INSTR.IDENT_INSTRUMENTFORM = 2 THEN 4
            WHEN INSTR.IDENT_INSTRUMENTFORM = 3 THEN 1
            WHEN INSTR.IDENT_INSTRUMENTFORM = 1 THEN 0
            END
            AS CODE_PHYS,
            CASE WHEN INSTR.ISBEARER = 1 THEN 1 ELSE 2 END AS CODE_REG,
            CAST (NULL AS NUMBER) AS CODE_SEC_RATE,
            INSTR.REGISTRATIONDATE AS DATE_ACTI,
            INSTR.MATURITYDATE AS DAT_MAT,
            CAST (NULL AS VARCHAR2 (30)) AS EXT_REF,
            INSTR.SETTLEMENTLOT AS SEC_DENM,
			SUBSTR(INSTR.LONGNAME,1,LEAST(50, LENGTH(INSTR.LONGNAME))) AS SEC_DSC,
            INSTR.TOTALALLOWEDQUANTITY AS SEC_NUM,
            CASE
            WHEN INSTR.IDENT_ASSETCLASS IN (1001, 1029, 1030) THEN 2
            WHEN INSTR.IDENT_ASSETCLASS IN (1002, 1028) THEN 1
            WHEN INSTR.IDENT_ASSETCLASS = 1003 THEN 14
            WHEN INSTR.IDENT_ASSETCLASS IN (1004, 1031) THEN 7
            WHEN INSTR.IDENT_ASSETCLASS = 1005 THEN 4
            WHEN INSTR.IDENT_ASSETCLASS = 1006 THEN 5
            WHEN INSTR.IDENT_ASSETCLASS IN (1007, 1027) THEN 16
            WHEN INSTR.IDENT_ASSETCLASS IN (1008, 1017) THEN 3
            WHEN INSTR.IDENT_ASSETCLASS IN (1009, 1018, 1019) THEN 13
            WHEN INSTR.IDENT_ASSETCLASS = 1010 THEN 11
            WHEN INSTR.IDENT_ASSETCLASS = 1011 THEN 17
            WHEN INSTR.IDENT_ASSETCLASS = 1012 THEN 8
            WHEN INSTR.IDENT_ASSETCLASS = 1013 THEN 18
            WHEN INSTR.IDENT_ASSETCLASS = 1014 THEN 9
            WHEN INSTR.IDENT_ASSETCLASS IN (1015,1032) THEN 19
            WHEN INSTR.IDENT_ASSETCLASS = 1016 THEN 15
			WHEN INSTR.IDENT_ASSETCLASS = 1033 THEN 20
            ELSE 0
            END
            AS TYP_SEC,
            RA.EXERCISEPRICE AS EXE_PRI,
            CASE WHEN RA.IDENT_WARRANTTYPE = 0 THEN 1 ELSE 1 END AS TYP_OPT,
            CASE WHEN RA.IDENT_EXERCISESTYLE = 1 THEN 2 ELSE 1 END AS TYP_EXE,
            NVL (RA.UNDERLYINGASSETS, 1) AS WAR_RATIO,
            RA.IDENT_UNDERLYINGINSTRUMENT AS INS_ID_INS_XCSD,
            INSTR.IDENT_INSTRUMENT AS CASEC_ID_CASEC_XCSD,
            CU.CODE AS CODE_CURR,
            CASE WHEN SUSP.IDENT_BLOCKINGREASON = 4 THEN 1
			WHEN SUSP.IDENT_BLOCKINGREASON = 11 THEN 2
			WHEN SUSP.IDENT_BLOCKINGREASON = 7 THEN 3
			WHEN SUSP.IDENT_BLOCKINGREASON = 12 THEN 4
			WHEN SUSP.IDENT_BLOCKINGREASON = 2 THEN 1001
			WHEN SUSP.IDENT_BLOCKINGREASON = 1 THEN 1002
			WHEN SUSP.IDENT_BLOCKINGREASON = 8 THEN 1012
			WHEN SUSP.IDENT_BLOCKINGREASON = 6 THEN 1007
			WHEN SUSP.IDENT_BLOCKINGREASON = 5 THEN 1008
			WHEN SUSP.IDENT_BLOCKINGREASON = 9 THEN 1009
			WHEN SUSP.IDENT_BLOCKINGREASON = 10 THEN 1009
			END AS CODE_BR,
            INSTR.IDENT_ISSUERCSD AS ID_REGISTRAR_XCSD,
            INSTR.IDENT_ISSUER AS ID_ISSUER_XCSD
            FROM INSTRUMENT INSTR
            LEFT JOIN
            (SELECT SUSP.*,
            ROW_NUMBER ()
            OVER (PARTITION BY IDENT_INSTRUMENTEXT ORDER BY IDENT ASC)
            AS SUSPROW
            FROM INSTRUMENTSUSPENSION SUSP) SUSP
            ON SUSP.IDENT_INSTRUMENTEXT = INSTR.IDENT_INSTRUMENT
            AND SUSPROW = 1
            LEFT JOIN ASSETCLASS AC
            ON INSTR.IDENT_ASSETCLASS = AC.IDENT_ASSETCLASS
            LEFT JOIN ASSETCLASSTYPE ACT
            ON AC.IDENT_ASSETCLASSTYPE = ACT.IDENT_ASSETCLASSTYPE,
            RIGHTSATTRIBUTES RA,
            CURRENCY CU
            WHERE INSTR.IDENT_MASTER IS NULL
            AND INSTR.NAME IS NOT NULL
            AND CU.IDENT_CURRENCY = INSTR.IDENT_CURRENCY
            AND ACT.IDENT_ASSETCLASSTYPE = 10
            AND INSTR.IDENT_RIGHTSATTRIBUTES = RA.IDENT_RIGHTSATTRIBUTES);
